function splitText(e,r=2){const t=[];for(let n=0;n<e.length-r+1;n++)t.push(e.slice(n,n+r));return t}function splitWords(e){return dedup(e.split(/\s+/).filter(e=>e.length>0))}function tokenize(e,r=2){return dedup(splitText(e,r))}function splitQuery(e,r=2){const t={};return e.split(/\s+/).filter(e=>e.length>0).forEach(e=>t[e]=tokenize(e,r)),t}function dedup(e){const r=new Array(e.length),t=new Set;let n=0;for(let s=0;s<e.length;s++)t.has(e[s])||(t.add(e[s]),r[n]=e[s],n++);return r.slice(0,n)}function fastMap(e,r){const t=new Array(e.length);for(let n=0;n<e.length;n++)t[n]=r(e[n]);return t}function flatten(e){let r=0;for(let t=0;t<e.length;t++)r+=e[t].length;const t=new Array(r);let n=0;for(let r=0;r<e.length;r++)for(let s=0;s<e[r].length;s++)t[n]=e[r][s],n++;return t}class NoSuchColumnError extends Error{constructor(e){super(e+": no such column or no indexed"),this.column=e,this.name="",Error.captureStackTrace&&Error.captureStackTrace(this,NoSuchColumnError)}}class InvalidKeyError extends Error{constructor(e){super("invalid key"),this.key=e,this.name="",Error.captureStackTrace&&Error.captureStackTrace(this,InvalidKeyError)}}class InvalidSchemaError extends Error{constructor(e,r=null){super(e),this.column=r,this.name="InvalidSchemaError",Error.captureStackTrace&&Error.captureStackTrace(this,InvalidSchemaError)}}class IFTSArrayPromise{constructor(e,r){this.indexes=e,this.promise=r}static resolve(e,r=[]){return new IFTSArrayPromise(e,Promise.resolve(r))}static reject(e,r=null){return new IFTSArrayPromise(e,Promise.reject(r))}then(e){return this.promise.then(e)}catch(e){return this.promise.catch(e)}map(e){return new IFTSArrayPromise(this.indexes,this.then(r=>r.map(e)))}filter(e){return new IFTSArrayPromise(this.indexes,this.then(r=>r.filter(e)))}sort(e,r="asc",t=0,n){return this.indexes.has(e)?new IFTSArrayPromise(this.indexes,this.then(s=>Array.prototype.concat.call([],s).sort((t,n)=>t[e]<n[e]?"desc"===r?1:-1:t[e]>n[e]?"desc"===r?-1:1:0).slice(t,void 0===n?void 0:t+n))):IFTSArrayPromise.reject(this.indexes,new NoSuchColumnError(e))}_checkAndFilter(e,r){return this.indexes.has(e)?this.filter(r):IFTSArrayPromise.reject(this.indexes,new NoSuchColumnError(e))}equals(e,r){return this._checkAndFilter(e,t=>t[e]===r)}lower(e,r){return this._checkAndFilter(e,t=>t[e]<r)}greater(e,r){return this._checkAndFilter(e,t=>t[e]>r)}lowerOrEquals(e,r){return this._checkAndFilter(e,t=>t[e]<=r)}greaterOrEquals(e,r){return this._checkAndFilter(e,t=>t[e]>=r)}between(e,r,t){return this._checkAndFilter(e,n=>r<=n[e]&&n[e]<=t)}search(e,r){"string"==typeof e&&(e=[e]);for(let r of e)if(!this.indexes.has(r))return IFTSArrayPromise.reject(this.indexes,new NoSuchColumnError(r));const t=[];for(let e in splitQuery(r))t.push(e);return this.filter(r=>t.every(t=>e.some(e=>r[e].includes(t))))}searchWord(e,r){"string"==typeof e&&(e=[e]);for(let r of e)if(!this.indexes.has(r))return IFTSArrayPromise.reject(this.indexes,new NoSuchColumnError(r));const t=splitWords(r);return this.filter(r=>t.every(t=>e.some(e=>splitWords(r[e]).includes(t))))}}class IFTSTransaction{constructor(e,r){this.db=e,this.transaction=r,this._KeyRange=this.db.scope.IDBKeyRange,this.promise=new Promise((e,r)=>{this.transaction.oncomplete=(()=>e(this.db)),this.transaction.onerror=(e=>r(e))}),this._cache={}}put(...e){const r=this.transaction.objectStore("data"),t=fastMap([...this.db.ngram_indexes],e=>({name:e,store:this.transaction.objectStore(this.db.index_prefix+"ngram_"+e)})),n=fastMap([...this.db.word_indexes],e=>({name:e,store:this.transaction.objectStore(this.db.index_prefix+"word_"+e)})),s=new Array(e.length);for(let i=0;i<e.length;i++)s[i]=new Promise((s,o)=>{const a=r.put(e[i]);a.onerror=o,a.onsuccess=(r=>{s(this._updateNGramIndex(r.target.result,e[i],t).then(()=>this._updateWordIndex(r.target.result,e[i],n)))})});return Promise.all(s).then(e=>{for(let r=0;r<e.length;r++){const t=e[r][0],n=e[r][1];null===this.db.primary_key&&(n._key=t),this._cache[t]=n}return this})}_updateNGramIndex(e,r,t){return this._deleteIndex(e,t.map(e=>this.db.index_prefix+"ngram_"+e.name)).then(()=>Promise.all(fastMap(t,t=>{const n=tokenize(r[t.name]),s=new Array(n.length);for(let r=0;r<n.length;r++)s[r]=new Promise((s,i)=>{const o=t.store.put({key:e,token:n[r]});o.onsuccess=(()=>s()),o.onerror=i});return Promise.all(s)}))).then(()=>[e,r])}_updateWordIndex(e,r,t){return this._deleteIndex(e,t.map(e=>this.db.index_prefix+"word_"+e.name)).then(()=>Promise.all(fastMap(t,t=>{const n=splitWords(r[t.name]),s=new Array(n.length);for(let r=0;r<n.length;r++)s[r]=new Promise((s,i)=>{const o=t.store.put({key:e,word:n[r]});o.onsuccess=(()=>s()),o.onerror=i});return Promise.all(s)}))).then(()=>[e,r])}_deleteIndex(e,r){return Promise.all(r.map(r=>new Promise((t,n)=>{const s=this.transaction.objectStore(r);s.onerror=n;const i=[],o=s.index("key").openKeyCursor(this._KeyRange.only(e));o.onerror=n,o.onsuccess=(e=>{const r=e.target.result;r?(i.push(new Promise((e,t)=>{const n=s.delete(r.primaryKey);n.onsuccess=e,n.onerror=t})),r.continue()):t(Promise.all(i))})})))}delete(...e){for(let r=0;r<e.length;r++)if(null===e[r]||void 0===e[r])return Promise.reject(new InvalidKeyError(e[r]));return Promise.all(fastMap(e,e=>new Promise((r,t)=>{const n=this.transaction.objectStore("data").delete(e);n.onerror=t,n.onsuccess=r}).then(()=>this._deleteIndex(e,[...[...this.db.ngram_indexes].map(e=>this.db.index_prefix+"ngram_"+e),...[...this.db.word_indexes].map(e=>this.db.index_prefix+"word_"+e)])))).then(()=>this)}_readCursor(e,r=null,t=null,n){return r=r||((e,r)=>!0),t=t||((e,r)=>e),new IFTSArrayPromise(this.db.indexes,new Promise((s,i)=>{const o=[];let a=0;e.onsuccess=(e=>{const i=e.target.result;if(i){const e=i.value;null===this.db.primary_key&&(e._key=i.key),this._cache[i.key]=e,r(e,a)&&o.push(t(e,a)),a++,void 0===n||a<n?i.continue():s(o)}else s(o)}),e.onerror=(e=>i(e))}))}getAll(){return this._readCursor(this.transaction.objectStore("data").openCursor())}_getAllWithKeys(){return new IFTSArrayPromise(this.db.indexes,new Promise((e,r)=>{const t=this.transaction.objectStore("data").openCursor(),n=[];t.onsuccess=(r=>{const t=r.target.result;if(t){const e=t.value;null===this.db.primary_key&&(e._key=t.key),this._cache[t.key]=e,n.push({key:t.key,data:e}),t.continue()}else e(n)}),t.onerror=(e=>r(e))}))}map(e){return this._readCursor(this.transaction.objectStore("data").openCursor(null),null,e)}filter(e){return this._readCursor(this.transaction.objectStore("data").openCursor(null),e,null)}sort(e,r="asc",t=0,n){if(!this.db.indexes.has(e))return IFTSArrayPromise.reject(this.db.indexes,new NoSuchColumnError(e));n=void 0===n?void 0:t+n;const s=(e,r)=>t<=r,i=this.transaction.objectStore("data");return e===this.db.primary_key?this._readCursor(i.openCursor(null,"desc"===r?"prev":"next"),s,null,n):this._readCursor(i.index(e).openCursor(null,"desc"===r?"prev":"next"),s,null,n)}get(e){return null===e||void 0===e?Promise.reject(new InvalidKeyError(e)):e in this._cache?Promise.resolve(this._cache[e]):new Promise((r,t)=>{const n=this.transaction.objectStore("data").get(e);n.onsuccess=(t=>{const n=t.target.result;null===this.db.primary_key&&(n._key=e),this._cache[e]=n,r(n)}),n.onerror=t})}_getAllWithIndex(e,r){if(!this.db.indexes.has(e))return IFTSArrayPromise.reject(this.db.indexes,new NoSuchColumnError(e));const t=this.transaction.objectStore("data");return e===this.db.primary_key?this._readCursor(t.openCursor(r)):this._readCursor(t.index(e).openCursor(r))}equals(e,r){return this._getAllWithIndex(e,this._KeyRange.only(r))}lower(e,r){return this._getAllWithIndex(e,this._KeyRange.upperBound(r,!0))}greater(e,r){return this._getAllWithIndex(e,this._KeyRange.lowerBound(r,!0))}lowerOrEquals(e,r){return this._getAllWithIndex(e,this._KeyRange.upperBound(r,!1))}greaterOrEquals(e,r){return this._getAllWithIndex(e,this._KeyRange.lowerBound(r,!1))}between(e,r,t){return this._getAllWithIndex(e,this._KeyRange.bound(r,t,!1,!1))}_takeCandidatesBySingleColumn(e,r){const t=this.transaction.objectStore(this.db.index_prefix+"ngram_"+e).index("token"),n=[];for(let s in r){if(0===r[s].length){n.push(this._getAllWithKeys().filter(r=>r.data[e].includes(s)).map(e=>e.key).then(e=>({query:s,keys:e})));continue}const i=new Array(r[s].length);for(let e=0;e<r[s].length;e++)i[e]=this._readCursor(t.openCursor(r[s][e]),null,e=>e.key);const o=Promise.all(i).then(e=>{if(0===e.length)return Promise.resolve([]);e=flatten(e);const t=new Array(e.length);let n=0;const i={};for(let r=0;r<e.length;r++)e[r]in i||(i[e[r]]=0,t[n]=e[r],n++),i[e[r]]++;const o=new Array(n);let a=0;for(let e=0;e<n;e++)i[t[e]]>=r[s].length&&(o[a]=this.get(t[e]).then(r=>({key:t[e],data:r})),a++);return Promise.all(o.slice(0,a))}).then(r=>({query:s,keys:r.filter(r=>r.data[e].includes(s)).map(e=>e.key)}));n.push(o)}return n}async _pruneCandidates(e,r){const t={};for(let e=0;e<r.length;e++)for(let n=0;n<r[e].keys.length;n++)r[e].keys[n]in t||(t[r[e].keys[n]]=new Set),t[r[e].keys[n]].add(r[e].query);const n=new Array(r.length);let s=0;for(let r in t)t[r].size==e&&(n[s]=this.get(r),s++);return await Promise.all(n.slice(0,s))}search(e,r){"string"==typeof e&&(e=[e]);for(let r=0;r<e.length;r++)if(!this.db.ngram_indexes.has(e[r]))return IFTSArrayPromise.reject(this.db.indexes,new NoSuchColumnError(e[r]));const t=splitQuery(r);let n=0;for(let e in t)t[e]=fastMap(t[e],e=>this._KeyRange.only(e)),n++;const s=[];for(let r=0;r<e.length;r++)Array.prototype.push.apply(s,this._takeCandidatesBySingleColumn(e[r],t));return new IFTSArrayPromise(this.db.indexes,Promise.all(s).then(e=>this._pruneCandidates(n,e)))}searchWord(e,r){"string"==typeof e&&(e=[e]);for(let r=0;r<e.length;r++)if(!this.db.word_indexes.has(e[r]))return IFTSArrayPromise.reject(this.db.indexes,new NoSuchColumnError(e[r]));const t=splitWords(r).map(e=>({text:e,keyRange:this._KeyRange.only(e)}));return new IFTSArrayPromise(this.db.indexes,Promise.all(flatten(e.map(e=>{const r=this.transaction.objectStore(this.db.index_prefix+"word_"+e).index("word");return t.map(e=>this._readCursor(r.openCursor(e.keyRange),null,r=>[r.key,e.text]))}))).then(e=>{e=dedup(flatten(e));const r={};for(let t=0;t<e.length;t++){const n=e[t][0];n in r||(r[n]=0),r[n]++}const n=new Array(e.length);let s=0;for(let i=0;i<e.length;i++){const o=e[i][0];r[o]>=t.length&&(n[s]=o,s++)}const i=new Array(s);for(let e=0;e<s;e++)i[e]=this.get(n[e]);return new IFTSArrayPromise(this.db.indexes,Promise.all(i))}))}getNGrams(e){if(!this.db.ngram_indexes.has(e))return Promise.reject(new NoSuchColumnError(e));const r=new Map,t=this.transaction.objectStore(this.db.index_prefix+"ngram_"+e).openCursor();return new Promise((e,n)=>{t.onsuccess=(t=>{const n=t.target.result;n?(r.set(n.value.token,(r.get(n.value.token)||0)+1),n.continue()):e(r)}),t.onerror=(e=>n(e))})}getWords(e){if(!this.db.word_indexes.has(e))return Promise.reject(new NoSuchColumnError(e));const r=new Map,t=this.transaction.objectStore(this.db.index_prefix+"word_"+e).openCursor();return new Promise((e,n)=>{t.onsuccess=(t=>{const n=t.target.result;n?(r.set(n.value.word,(r.get(n.value.word)||0)+1),n.continue()):e(r)}),t.onerror=(e=>n(e))})}}class IndexedFTS{constructor(e,r,t,n={}){this.index_prefix=n.index_prefix||"indexedfts_",this.scope=n.scope||window,this.name=e,this.version=r,this.schema=t,this.store_option={autoIncrement:!0},this.primary_key=null,this.ngram_indexes=new Set,this.word_indexes=new Set,this.unique_indexes=new Set,this.normal_indexes=new Set,this.db=null;for(let e in t){if("primary"===t[e]||t[e].primary){if("keyPath"in this.store_option)throw new Error("can not use multi primary key");this.primary_key=e,this.store_option={keyPath:e}}else"unique"===t[e]||t[e].unique?this.unique_indexes.add(e):this.normal_indexes.add(e);("ngram"===t[e]||t[e].ngram||"fulltext"===t[e]||t[e].fulltext)&&this.ngram_indexes.add(e),("word"===t[e]||t[e].word)&&this.word_indexes.add(e)}}static delete(e,r=null){return new Promise((t,n)=>{const s=(r||window).indexedDB.deleteDatabase(e);s.onsuccess=(e=>t()),s.onerror=(e=>n(e))})}get indexes(){const e=new Set([...this.ngram_indexes,...this.word_indexes,...this.unique_indexes,...this.normal_indexes]);return null!==this.primary_key&&e.add(this.primary_key),e}open(){return new Promise((e,r)=>{const t=this.scope.indexedDB.open(this.name,this.version);t.onsuccess=(r=>{this.db=r.target.result,e(this)}),t.onerror=r,t.onupgradeneeded=(e=>{this.db=e.target.result;const t=this.db.createObjectStore("data",this.store_option);t.onerror=r,this.unique_indexes.forEach(e=>t.createIndex(e,e,{unique:!0})),this.normal_indexes.forEach(e=>t.createIndex(e,e,{unique:!1})),this.ngram_indexes.forEach(e=>{const t=this.db.createObjectStore(this.index_prefix+"ngram_"+e,{autoIncrement:!0});t.onerror=r,t.createIndex("key","key",{unique:!1}),t.createIndex("token","token",{unique:!1})}),this.word_indexes.forEach(e=>{const t=this.db.createObjectStore(this.index_prefix+"word_"+e,{autoIncrement:!0});t.onerror=r,t.createIndex("key","key",{unique:!1}),t.createIndex("word","word",{unique:!1})})})})}close(){this.db.close()}transaction(e="readonly",r=null){if(null===r){const e=[...this.ngram_indexes].map(e=>this.index_prefix+"ngram_"+e),t=[...this.word_indexes].map(e=>this.index_prefix+"word_"+e);r=e.concat(t).concat(["data"])}return new IFTSTransaction(this,this.db.transaction(r,e))}put(...e){return this.transaction("readwrite").put(...e).then(()=>this)}delete(...e){return this.transaction("readwrite").delete(...e).then(()=>this)}get(e){return this.transaction("readonly","data").get(e)}_getFiltered(e){return e(this.transaction("readonly","data"))}getAll(){return this._getFiltered(e=>e.getAll())}map(e){return this._getFiltered(r=>r.map(e))}filter(e){return this._getFiltered(r=>r.filter(e))}sort(e,r="asc",t=0,n){return this._getFiltered(s=>s.sort(e,r,t,n))}equals(e,r){return this._getFiltered(t=>t.equals(e,r))}lower(e,r){return this._getFiltered(t=>t.lower(e,r))}greater(e,r){return this._getFiltered(t=>t.greater(e,r))}lowerOrEquals(e,r){return this._getFiltered(t=>t.lowerOrEquals(e,r))}greaterOrEquals(e,r){return this._getFiltered(t=>t.greaterOrEquals(e,r))}between(e,r,t){return this._getFiltered(n=>n.between(e,r,t))}search(e,r){return this.transaction().search(e,r)}searchWord(e,r){return this.transaction().searchWord(e,r)}getNGrams(e){return this.transaction().getNGrams(e)}getWords(e){return this.transaction().getWords(e)}}function normalize(e){const r=new Set(["primary","unique","ngram","fulltext","word"]),t={};for(const n in e)if(t[n]={primary:"primary"===e[n]||e[n].primary,unique:"unique"===e[n]||e[n].unique,ngram:"ngram"===e[n]||e[n].ngram,fulltext:"fulltext"===e[n]||e[n].fulltext,word:"word"===e[n]||e[n].word},"object"==typeof e[n]){for(const t in e[n])if(!r.has(t))throw new InvalidSchemaError(t+" is unknown option",n)}else{if("string"!=typeof e[n])throw new InvalidSchemaError(typeof e[n]+" is invalid option type",n);if(!r.has(e[n]))throw new InvalidSchemaError(e[n]+" is unknown option",n)}return t}function schemaCheck(e){let r=null;for(const t in e){if(void 0!==e[t].primary){if("boolean"!=typeof e[t].primary)throw new InvalidSchemaError('"primary" option must be boolean',t);if(e[t].primary){if(null!==r)throw new InvalidSchemaError("can not use multiple primary key",[t,r]);r=t}}if(void 0!==e[t].unique&&"boolean"!=typeof e[t].unique)throw new InvalidSchemaError('"unique" option must be boolean',t);if(e[t].primary&&e[t].unique)throw new InvalidSchemaError('can not enable both of "primary" option and "unique" option to same column',t);if(void 0!==e[t].ngram&&void 0!==e[t].fulltext)throw new InvalidSchemaError('can not set both of "ngram" option and "fulltext" option to same column',t);const n=void 0===e[t].ngram?e[t].fulltext:e[t].ngram,s=void 0===e[t].ngram?"fulltext":"ngram";if(void 0!==n&&"boolean"!=typeof n)throw new InvalidSchemaError(`"${s}" option must be boolean`,t);if(void 0!==e[t].word&&"boolean"!=typeof e[t].word)throw new InvalidSchemaError('"word" option must be boolean',t)}}class IFTSSchema{constructor(e){this._rawSchema=e,this._storeOption={autoIncrement:!0},this.primaryKey=null,this.ngramIndexes=new Set,this.wordIndexes=new Set,this.uniqueIndexes=new Set,this.normalIndexes=new Set;for(let r in e){const t=normalize(e);schemaCheck(t),t[r].primary?(this.primaryKey=r,this._storeOption={keyPath:r}):t[r].unique?this.uniqueIndexes.add(r):this.normalIndexes.add(r),(t[r].ngram||t[r].fulltext)&&this.ngramIndexes.add(r),t[r].word&&this.wordIndexes.add(r)}}get indexes(){return this.primaryKey?new Set([this.primaryKey,...this.uniqueIndexes,...this.normalIndexes]):new Set([...this.uniqueIndexes,...this.normalIndexes])}}export default IndexedFTS;export{IFTSTransaction,IFTSArrayPromise,IFTSSchema,NoSuchColumnError,InvalidKeyError,InvalidSchemaError};
//# sourceMappingURL=indexedfts.min.mjs.map
