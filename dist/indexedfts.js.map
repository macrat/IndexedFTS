{"version":3,"file":"indexedfts.js","sources":["../lib/utils.js","../lib/errors.js","../lib/IFTSArrayPromise.js","../lib/IFTSTransaction.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => data[col].includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitWords(query);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(data[col]).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './IFTSArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.ngram_indexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.word_indexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.primary_key === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.ngram_indexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.word_indexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.primary_key === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.primary_key === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.primary_key) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.primary_key === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.primary_key) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries) {\n\t\tconst index = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column).index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(x => x.data[column].includes(q)).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(x => x.data[column].includes(q)).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.ngram_indexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.word_indexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst index = this.transaction.objectStore(this.db.index_prefix + 'word_' + col).index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column) {\n\t\tif (!this.db.ngram_indexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst result = new Map();\n\n\t\tconst cursor = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column).openCursor();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.value.token, (result.get(cursor.value.token) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column) {\n\t\tif (!this.db.word_indexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst result = new Map();\n\n\t\tconst cursor = this.transaction.objectStore(this.db.index_prefix + 'word_' + column).openCursor();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.value.word, (result.get(cursor.value.word) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n}\n","import IFTSTransaction from './IFTSTransaction';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or normal index.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t *\n\t * 'unique' is columns that have a unique value in the database.\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * The normal index that not set optioned that not unique, not primary, and not indexed for full-text search. You can numeric search like {@link IndexedFTS#lower} {@link IndexedFTS#between} even if not set option.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {Array<string|object>} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {object} */\n\t\tthis.schema = schema;\n\n\t\t/** @type {object} */\n\t\tthis.store_option = {autoIncrement: true};\n\n\t\t/** @type {string|null} */\n\t\tthis.primary_key = null;\n\n\t\t/** @type {Set<string>} */\n\t\tthis.ngram_indexes = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.word_indexes = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.unique_indexes = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.normal_indexes = new Set();\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\n\t\tfor (let x in schema) {\n\t\t\tif (schema[x] === 'primary' || schema[x].primary) {\n\t\t\t\tif ('keyPath' in this.store_option) {\n\t\t\t\t\tthrow new Error('can not use multi primary key');\n\t\t\t\t}\n\t\t\t\tthis.primary_key = x;\n\t\t\t\tthis.store_option = {keyPath: x};\n\t\t\t} else if (schema[x] === 'unique' || schema[x].unique) {\n\t\t\t\tthis.unique_indexes.add(x);\n\t\t\t} else {\n\t\t\t\tthis.normal_indexes.add(x);\n\t\t\t}\n\n\t\t\tif (schema[x] === 'ngram' || schema[x].ngram\n\t\t\t|| schema[x] === 'fulltext' || schema[x].fulltext) {\n\t\t\t\tthis.ngram_indexes.add(x);\n\t\t\t}\n\n\t\t\tif (schema[x] === 'word' || schema[x].word) {\n\t\t\t\tthis.word_indexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/** @type {Set<string>} */\n\tget indexes() {\n\t\tconst r = new Set([...this.ngram_indexes, ...this.word_indexes, ...this.unique_indexes, ...this.normal_indexes]);\n\t\tif (this.primary_key !== null) {\n\t\t\tr.add(this.primary_key);\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.store_option);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.unique_indexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.normal_indexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.ngram_indexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.word_indexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.ngram_indexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.word_indexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query) {\n\t\treturn this.transaction().search(columns, query);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\treturn this.transaction().searchWord(columns, query);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column) {\n\t\treturn this.transaction().getNGrams(column);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column) {\n\t\treturn this.transaction().getWords(column);\n\t}\n}\n"],"names":["splitText","text","ngram","result","i","length","push","slice","splitWords","dedup","split","filter","x","tokenize","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","column","name","captureStackTrace","InvalidKeyError","key","IFTSArrayPromise","indexes","promise","resolve","value","Promise","reject","then","catch","xs","map","order","offset","limit","undefined","prototype","concat","call","sort","y","_checkAndFilter","lower","upper","columns","c","queries","data","every","some","col","includes","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","contents","store","objectStore","ngram_indexes","index_prefix","word_indexes","putPromises","req","put","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primary_key","_key","_deleteIndex","tokens","promises","words","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","primaryKey","continue","keys","cursorRequest","_readCursor","openCursor","request","offsetFilter","get","keyRange","_getAllWithIndex","upperBound","lowerBound","bound","_getAllWithKeys","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","_pruneCandidates","queries_num","result_num","size","queries_length","candidatePromises","apply","_takeCandidatesBySingleColumn","counts","hits","hits_count","Map","set","token","word","IndexedFTS","version","schema","options","window","store_option","autoIncrement","unique_indexes","normal_indexes","primary","keyPath","unique","fulltext","indexedDB","deleteDatabase","r","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered","getAll","equals","greater","lowerOrEquals","greaterOrEquals","between","search","searchWord","getNGrams","getWords"],"mappings":"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"}