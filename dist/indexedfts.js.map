{"version":3,"file":"indexedfts.js","sources":["../lib/utils.js","../lib/errors.js","../lib/ArrayPromise.js","../lib/Transaction.js","../lib/Schema.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidSchemaError means specified invalid schema.\n */\nexport class InvalidSchemaError extends Error {\n\t/**\n\t * @param {string} reason - why throws this error.\n\t * @param {string|string[]|null} column - name of column that invalid.\n\t */\n\tconstructor(reason, column=null) {\n\t\tsuper(reason);\n\n\t\t/**\n\t\t * Name of column that invalid.\n\t\t *\n\t\t * @type {string|string[]|null}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = 'InvalidSchemaError';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidSchemaError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => toLowerIfNeed(data[col]).includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query);\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(toLowerIfNeed(data[col])).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './ArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.schema.ngramIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.schema.wordIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t\tlower: tokens[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t\tlower: words[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.schema.ngramIndexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.schema.wordIndexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries, options={}) {\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tconst checkIncludes = (\n\t\t\t\toptions.ignoreCase\n\t\t\t\t\t? (x => x.data[column].toLowerCase().includes(q))\n\t\t\t\t\t: (x => x.data[column].includes(q))\n\t\t\t);\n\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(checkIncludes).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(checkIncludes).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.ngramIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries, options));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.schema.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.wordIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + col);\n\t\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Make token set from index.\n\t *\n\t * @ignore\n\t */\n\t_readIndexSet(index) {\n\t\tconst result = new Map();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cursor = index.openKeyCursor();\n\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.key, (result.get(cursor.key) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\tif (!this.db.schema.ngramIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\n\t\treturn this._readIndexSet(index);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\tif (!this.db.schema.wordIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\treturn this._readIndexSet(index);\n\t}\n}\n","import {InvalidSchemaError} from './errors';\n\n\n/** @ignore */\nfunction normalize(schema) {\n\tconst allowedOptions = new Set(['primary', 'unique', 'normal', 'ngram', 'fulltext', 'word']);\n\n\tconst result = {};\n\tfor (const col in schema) {\n\t\tresult[col] = {};\n\n\t\tif (typeof schema[col] === 'object') {\n\t\t\tfor (const opt in schema[col]) {\n\t\t\t\tif (!allowedOptions.has(opt)) {\n\t\t\t\t\tthrow new InvalidSchemaError(opt + ' is unknown option', col);\n\t\t\t\t}\n\t\t\t\tresult[col][opt] = schema[col][opt];\n\t\t\t}\n\t\t} else if (typeof schema[col] === 'string') {\n\t\t\tif (!allowedOptions.has(schema[col])) {\n\t\t\t\tthrow new InvalidSchemaError(schema[col] + ' is unknown option', col);\n\t\t\t}\n\t\t\tresult[col][schema[col]] = true;\n\t\t} else {\n\t\t\tthrow new InvalidSchemaError((typeof schema[col]) + ' is invalid option type', col);\n\t\t}\n\t}\n\treturn result;\n}\n\n\n/** @ignore */\nfunction schemaCheck(schema) {\n\tlet primaryKey = null;\n\n\tfor (const col in schema) {\n\t\tif (schema[col].primary !== undefined) {\n\t\t\tif (typeof schema[col].primary !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"primary\" option must be boolean', col);\n\t\t\t}\n\t\t\tif (schema[col].primary) {\n\t\t\t\tif (primaryKey !== null) {\n\t\t\t\t\tthrow new InvalidSchemaError('can not use multiple primary key', [col, primaryKey]);\n\t\t\t\t}\n\t\t\t\tprimaryKey = col;\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].unique !== undefined) {\n\t\t\tif (typeof schema[col].unique !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"unique\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].normal !== undefined) {\n\t\t\tif (typeof schema[col].normal !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"normal\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].primary && schema[col].unique) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"unique\" option to same column', col);\n\t\t}\n\t\tif (schema[col].primary && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"normal\" option to same column', col);\n\t\t}\n\t\tif (schema[col].unique && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"unique\" option and \"normal\" option to same column', col);\n\t\t}\n\n\t\tif (schema[col].ngram !== undefined && schema[col].fulltext !== undefined) {\n\t\t\tthrow new InvalidSchemaError('can not set both of \"ngram\" option and \"fulltext\" option to same column', col);\n\t\t}\n\t\tconst fts = schema[col].ngram === undefined ? schema[col].fulltext : schema[col].ngram;\n\t\tconst ftsFrom = schema[col].ngram === undefined ? 'fulltext' : 'ngram';\n\t\tif (fts !== undefined && typeof fts !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError(`\"${ftsFrom}\" option must be boolean`, col);\n\t\t}\n\n\t\tif (schema[col].word !== undefined && typeof schema[col].word !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError('\"word\" option must be boolean', col);\n\t\t}\n\t}\n}\n\n\nexport {normalize, schemaCheck};\n\n\n/**\n * The database schema of IndexedFTS.\n */\nexport default class IFTSSchema {\n\t/**\n\t * Create IFTSSchema.\n\t *\n\t * @param {object} schema - please see same name param of {@link IndexedFTS#constructor}.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(schema) {\n\t\t/** @ignore */\n\t\tthis._schema = normalize(schema);\n\n\t\t/** @ignore */\n\t\tthis._storeOption = {autoIncrement: true};\n\n\t\t/**\n\t\t * Primary key of this schema.\n\t\t *\n\t\t * This value will be null if not set primary key.\n\t\t *\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.primaryKey = null;\n\n\t\t/**\n\t\t * Column names that indexed with ngram for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.ngramIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that indexed with word for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.wordIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that unique indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.uniqueIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that normal indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.normalIndexes = new Set();\n\n\t\tfor (let x in schema) {\n\t\t\tschemaCheck(this._schema);\n\n\t\t\tif (this._schema[x].primary === true) {\n\t\t\t\tthis.primaryKey = x;\n\t\t\t\tthis._storeOption = {keyPath: x};\n\t\t\t} else if (this._schema[x].unique === true) {\n\t\t\t\tthis.uniqueIndexes.add(x);\n\t\t\t} else if (this._schema[x].normal !== false) {\n\t\t\t\tthis.normalIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].ngram || this._schema[x].fulltext) {\n\t\t\t\tthis.ngramIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].word) {\n\t\t\t\tthis.wordIndexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * All column names that indexed in some way.\n\t *\n\t * @type {Set<string>}\n\t */\n\tget indexes() {\n\t\tif (this.primaryKey) {\n\t\t\treturn new Set([this.primaryKey, ...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t} else {\n\t\t\treturn new Set([...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t}\n\t}\n}\n","import IFTSTransaction from './Transaction';\nimport IFTSSchema from './Schema';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or 'normal'.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t * 'unique' is columns that have a unique value in the database.\n\t * The 'normal' will enable when not primary and not unique.\n\t * 'primary', 'unique' and 'normal' column can numeric search (eg. {@link IndexedFTS#lower} or {@link IndexedFTS#between}).\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true, normal: false}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {object|IFTSSchema} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {IFTSSchema} */\n\t\tthis.schema = schema instanceof IFTSSchema ? schema : new IFTSSchema(schema);\n\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.schema._storeOption);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.schema.uniqueIndexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.schema.normalIndexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.schema.ngramIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.schema.wordIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.schema.ngramIndexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.schema.wordIndexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\treturn this.transaction().search(columns, query, options);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\treturn this.transaction().searchWord(columns, query, options);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\treturn this.transaction().getNGrams(column, options);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\treturn this.transaction().getWords(column, options);\n\t}\n}\n"],"names":["splitText","text","ngram","result","i","length","push","slice","splitWords","dedup","split","filter","x","tokenize","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","column","name","captureStackTrace","InvalidKeyError","key","InvalidSchemaError","reason","IFTSArrayPromise","indexes","promise","resolve","value","Promise","reject","then","catch","xs","map","order","offset","limit","undefined","prototype","concat","call","sort","y","_checkAndFilter","lower","upper","columns","options","c","ignoreCase","toLowerCase","queries","toLowerIfNeed","data","every","some","col","includes","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","contents","store","objectStore","ngram_indexes","schema","ngramIndexes","index_prefix","word_indexes","wordIndexes","putPromises","req","put","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primaryKey","_key","_deleteIndex","tokens","promises","words","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","continue","keys","cursorRequest","_readCursor","openCursor","request","offsetFilter","get","keyRange","_getAllWithIndex","upperBound","lowerBound","bound","checkIncludes","_getAllWithKeys","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","_pruneCandidates","queries_num","result_num","size","queries_length","candidatePromises","apply","_takeCandidatesBySingleColumn","counts","hits","hits_count","Map","set","_readIndexSet","normalize","allowedOptions","opt","schemaCheck","primary","unique","normal","fulltext","fts","ftsFrom","word","IFTSSchema","_schema","_storeOption","autoIncrement","uniqueIndexes","normalIndexes","keyPath","IndexedFTS","version","window","indexedDB","deleteDatabase","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered","getAll","equals","greater","lowerOrEquals","greaterOrEquals","between","search","searchWord","getNGrams","getWords"],"mappings":"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"}