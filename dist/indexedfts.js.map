{"version":3,"file":"indexedfts.js","sources":["../lib/utils.js","../lib/errors.js","../lib/ArrayPromise.js","../lib/Transaction.js","../lib/Schema.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidSchemaError means specified invalid schema.\n */\nexport class InvalidSchemaError extends Error {\n\t/**\n\t * @param {string} reason - why throws this error.\n\t * @param {string|string[]|null} column - name of column that invalid.\n\t */\n\tconstructor(reason, column=null) {\n\t\tsuper(reason);\n\n\t\t/**\n\t\t * Name of column that invalid.\n\t\t *\n\t\t * @type {string|string[]|null}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = 'InvalidSchemaError';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidSchemaError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => toLowerIfNeed(data[col]).includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query);\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(toLowerIfNeed(data[col])).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './ArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.schema.ngramIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.schema.wordIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t\tlower: tokens[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t\tlower: words[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.schema.ngramIndexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.schema.wordIndexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries, options={}) {\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tconst checkIncludes = (\n\t\t\t\toptions.ignoreCase\n\t\t\t\t\t? (x => x.data[column].toLowerCase().includes(q))\n\t\t\t\t\t: (x => x.data[column].includes(q))\n\t\t\t);\n\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(checkIncludes).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(checkIncludes).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.ngramIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries, options));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.schema.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.wordIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + col);\n\t\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Make token set from index.\n\t *\n\t * @ignore\n\t */\n\t_readIndexSet(index) {\n\t\tconst result = new Map();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cursor = index.openKeyCursor();\n\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.key, (result.get(cursor.key) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\tif (!this.db.schema.ngramIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\n\t\treturn this._readIndexSet(index);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\tif (!this.db.schema.wordIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\treturn this._readIndexSet(index);\n\t}\n}\n","import {InvalidSchemaError} from './errors';\n\n\n/** @ignore */\nfunction normalize(schema) {\n\tconst allowedOptions = new Set(['primary', 'unique', 'normal', 'ngram', 'fulltext', 'word']);\n\n\tconst result = {};\n\tfor (const col in schema) {\n\t\tresult[col] = {};\n\n\t\tif (typeof schema[col] === 'object') {\n\t\t\tfor (const opt in schema[col]) {\n\t\t\t\tif (!allowedOptions.has(opt)) {\n\t\t\t\t\tthrow new InvalidSchemaError(opt + ' is unknown option', col);\n\t\t\t\t}\n\t\t\t\tresult[col][opt] = schema[col][opt];\n\t\t\t}\n\t\t} else if (typeof schema[col] === 'string') {\n\t\t\tif (!allowedOptions.has(schema[col])) {\n\t\t\t\tthrow new InvalidSchemaError(schema[col] + ' is unknown option', col);\n\t\t\t}\n\t\t\tresult[col][schema[col]] = true;\n\t\t} else {\n\t\t\tthrow new InvalidSchemaError((typeof schema[col]) + ' is invalid option type', col);\n\t\t}\n\t}\n\treturn result;\n}\n\n\n/** @ignore */\nfunction schemaCheck(schema) {\n\tlet primaryKey = null;\n\n\tfor (const col in schema) {\n\t\tif (schema[col].primary !== undefined) {\n\t\t\tif (typeof schema[col].primary !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"primary\" option must be boolean', col);\n\t\t\t}\n\t\t\tif (schema[col].primary) {\n\t\t\t\tif (primaryKey !== null) {\n\t\t\t\t\tthrow new InvalidSchemaError('can not use multiple primary key', [col, primaryKey]);\n\t\t\t\t}\n\t\t\t\tprimaryKey = col;\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].unique !== undefined) {\n\t\t\tif (typeof schema[col].unique !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"unique\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].normal !== undefined) {\n\t\t\tif (typeof schema[col].normal !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"normal\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].primary && schema[col].unique) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"unique\" option to same column', col);\n\t\t}\n\t\tif (schema[col].primary && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"normal\" option to same column', col);\n\t\t}\n\t\tif (schema[col].unique && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"unique\" option and \"normal\" option to same column', col);\n\t\t}\n\n\t\tif (schema[col].ngram !== undefined && schema[col].fulltext !== undefined) {\n\t\t\tthrow new InvalidSchemaError('can not set both of \"ngram\" option and \"fulltext\" option to same column', col);\n\t\t}\n\t\tconst fts = schema[col].ngram === undefined ? schema[col].fulltext : schema[col].ngram;\n\t\tconst ftsFrom = schema[col].ngram === undefined ? 'fulltext' : 'ngram';\n\t\tif (fts !== undefined && typeof fts !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError(`\"${ftsFrom}\" option must be boolean`, col);\n\t\t}\n\n\t\tif (schema[col].word !== undefined && typeof schema[col].word !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError('\"word\" option must be boolean', col);\n\t\t}\n\t}\n}\n\n\nexport {normalize, schemaCheck};\n\n\n/**\n * The database schema of IndexedFTS.\n */\nexport default class IFTSSchema {\n\t/**\n\t * Create IFTSSchema.\n\t *\n\t * @param {object} schema - please see same name param of {@link IndexedFTS#constructor}.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(schema) {\n\t\t/** @ignore */\n\t\tthis._schema = normalize(schema);\n\n\t\t/** @ignore */\n\t\tthis._storeOption = {autoIncrement: true};\n\n\t\t/**\n\t\t * Primary key of this schema.\n\t\t *\n\t\t * This value will be null if not set primary key.\n\t\t *\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.primaryKey = null;\n\n\t\t/**\n\t\t * Column names that indexed with ngram for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.ngramIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that indexed with word for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.wordIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that unique indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.uniqueIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that normal indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.normalIndexes = new Set();\n\n\t\tfor (let x in schema) {\n\t\t\tschemaCheck(this._schema);\n\n\t\t\tif (this._schema[x].primary === true) {\n\t\t\t\tthis.primaryKey = x;\n\t\t\t\tthis._storeOption = {keyPath: x};\n\t\t\t} else if (this._schema[x].unique === true) {\n\t\t\t\tthis.uniqueIndexes.add(x);\n\t\t\t} else if (this._schema[x].normal !== false) {\n\t\t\t\tthis.normalIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].ngram || this._schema[x].fulltext) {\n\t\t\t\tthis.ngramIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].word) {\n\t\t\t\tthis.wordIndexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * All column names that indexed in some way.\n\t *\n\t * @type {Set<string>}\n\t */\n\tget indexes() {\n\t\tif (this.primaryKey) {\n\t\t\treturn new Set([this.primaryKey, ...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t} else {\n\t\t\treturn new Set([...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t}\n\t}\n}\n","import IFTSTransaction from './Transaction';\nimport IFTSSchema from './Schema';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or 'normal'.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t * 'unique' is columns that have a unique value in the database.\n\t * The 'normal' will enable when not primary and not unique.\n\t * 'primary', 'unique' and 'normal' column can numeric search (eg. {@link IndexedFTS#lower} or {@link IndexedFTS#between}).\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true, normal: false}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {object|IFTSSchema} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {IFTSSchema} */\n\t\tthis.schema = schema instanceof IFTSSchema ? schema : new IFTSSchema(schema);\n\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.schema._storeOption);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.schema.uniqueIndexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.schema.normalIndexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.schema.ngramIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.schema.wordIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.schema.ngramIndexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.schema.wordIndexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\treturn this.transaction().search(columns, query, options);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\treturn this.transaction().searchWord(columns, query, options);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\treturn this.transaction().getNGrams(column, options);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\treturn this.transaction().getWords(column, options);\n\t}\n}\n"],"names":["splitText","text","ngram","result","i","length","push","slice","splitWords","dedup","split","filter","x","tokenize","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","constructor","column","name","captureStackTrace","InvalidKeyError","key","InvalidSchemaError","reason","IFTSArrayPromise","indexes","promise","resolve","value","Promise","reject","then","catch","map","xs","sort","order","offset","limit","undefined","prototype","concat","call","y","_checkAndFilter","equals","lower","greater","lowerOrEquals","greaterOrEquals","between","upper","search","columns","options","c","ignoreCase","toLowerCase","queries","toLowerIfNeed","data","every","some","col","includes","searchWord","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","put","contents","store","objectStore","ngram_indexes","schema","ngramIndexes","index_prefix","word_indexes","wordIndexes","putPromises","req","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primaryKey","_key","_deleteIndex","tokens","promises","token","words","word","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","continue","keys","_readCursor","cursorRequest","getAll","openCursor","_getAllWithKeys","request","offsetFilter","get","_getAllWithIndex","keyRange","upperBound","lowerBound","bound","_takeCandidatesBySingleColumn","checkIncludes","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","_pruneCandidates","queries_num","result_num","size","queries_length","candidatePromises","apply","counts","hits","hits_count","_readIndexSet","Map","set","getNGrams","getWords","normalize","allowedOptions","opt","schemaCheck","primary","unique","normal","fulltext","fts","ftsFrom","IFTSSchema","_schema","_storeOption","autoIncrement","uniqueIndexes","normalIndexes","keyPath","IndexedFTS","version","window","indexedDB","deleteDatabase","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered"],"mappings":"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"}