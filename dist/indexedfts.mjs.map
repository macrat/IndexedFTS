{"version":3,"file":"indexedfts.mjs","sources":["../lib/utils.js","../lib/errors.js","../lib/ArrayPromise.js","../lib/Transaction.js","../lib/Schema.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidSchemaError means specified invalid schema.\n */\nexport class InvalidSchemaError extends Error {\n\t/**\n\t * @param {string} reason - why throws this error.\n\t * @param {string|string[]|null} column - name of column that invalid.\n\t */\n\tconstructor(reason, column=null) {\n\t\tsuper(reason);\n\n\t\t/**\n\t\t * Name of column that invalid.\n\t\t *\n\t\t * @type {string|string[]|null}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = 'InvalidSchemaError';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidSchemaError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => toLowerIfNeed(data[col]).includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query);\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(toLowerIfNeed(data[col])).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './ArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.schema.ngramIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.schema.wordIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t\tlower: tokens[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t\tlower: words[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.schema.ngramIndexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.schema.wordIndexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries, options={}) {\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tconst checkIncludes = (\n\t\t\t\toptions.ignoreCase\n\t\t\t\t\t? (x => x.data[column].toLowerCase().includes(q))\n\t\t\t\t\t: (x => x.data[column].includes(q))\n\t\t\t);\n\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(checkIncludes).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(checkIncludes).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.ngramIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries, options));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.schema.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.wordIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + col);\n\t\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Make token set from index.\n\t *\n\t * @ignore\n\t */\n\t_readIndexSet(index) {\n\t\tconst result = new Map();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cursor = index.openKeyCursor();\n\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.key, (result.get(cursor.key) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\tif (!this.db.schema.ngramIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\n\t\treturn this._readIndexSet(index);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\tif (!this.db.schema.wordIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\treturn this._readIndexSet(index);\n\t}\n}\n","import {InvalidSchemaError} from './errors';\n\n\n/** @ignore */\nfunction normalize(schema) {\n\tconst allowedOptions = new Set(['primary', 'unique', 'normal', 'ngram', 'fulltext', 'word']);\n\n\tconst result = {};\n\tfor (const col in schema) {\n\t\tresult[col] = {};\n\n\t\tif (typeof schema[col] === 'object') {\n\t\t\tfor (const opt in schema[col]) {\n\t\t\t\tif (!allowedOptions.has(opt)) {\n\t\t\t\t\tthrow new InvalidSchemaError(opt + ' is unknown option', col);\n\t\t\t\t}\n\t\t\t\tresult[col][opt] = schema[col][opt];\n\t\t\t}\n\t\t} else if (typeof schema[col] === 'string') {\n\t\t\tif (!allowedOptions.has(schema[col])) {\n\t\t\t\tthrow new InvalidSchemaError(schema[col] + ' is unknown option', col);\n\t\t\t}\n\t\t\tresult[col][schema[col]] = true;\n\t\t} else {\n\t\t\tthrow new InvalidSchemaError((typeof schema[col]) + ' is invalid option type', col);\n\t\t}\n\t}\n\treturn result;\n}\n\n\n/** @ignore */\nfunction schemaCheck(schema) {\n\tlet primaryKey = null;\n\n\tfor (const col in schema) {\n\t\tif (schema[col].primary !== undefined) {\n\t\t\tif (typeof schema[col].primary !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"primary\" option must be boolean', col);\n\t\t\t}\n\t\t\tif (schema[col].primary) {\n\t\t\t\tif (primaryKey !== null) {\n\t\t\t\t\tthrow new InvalidSchemaError('can not use multiple primary key', [col, primaryKey]);\n\t\t\t\t}\n\t\t\t\tprimaryKey = col;\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].unique !== undefined) {\n\t\t\tif (typeof schema[col].unique !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"unique\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].normal !== undefined) {\n\t\t\tif (typeof schema[col].normal !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"normal\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].primary && schema[col].unique) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"unique\" option to same column', col);\n\t\t}\n\t\tif (schema[col].primary && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"normal\" option to same column', col);\n\t\t}\n\t\tif (schema[col].unique && schema[col].normal) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"unique\" option and \"normal\" option to same column', col);\n\t\t}\n\n\t\tif (schema[col].ngram !== undefined && schema[col].fulltext !== undefined) {\n\t\t\tthrow new InvalidSchemaError('can not set both of \"ngram\" option and \"fulltext\" option to same column', col);\n\t\t}\n\t\tconst fts = schema[col].ngram === undefined ? schema[col].fulltext : schema[col].ngram;\n\t\tconst ftsFrom = schema[col].ngram === undefined ? 'fulltext' : 'ngram';\n\t\tif (fts !== undefined && typeof fts !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError(`\"${ftsFrom}\" option must be boolean`, col);\n\t\t}\n\n\t\tif (schema[col].word !== undefined && typeof schema[col].word !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError('\"word\" option must be boolean', col);\n\t\t}\n\t}\n}\n\n\nexport {normalize, schemaCheck};\n\n\n/**\n * The database schema of IndexedFTS.\n */\nexport default class IFTSSchema {\n\t/**\n\t * Create IFTSSchema.\n\t *\n\t * @param {object} schema - please see same name param of {@link IndexedFTS#constructor}.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(schema) {\n\t\t/** @ignore */\n\t\tthis._schema = normalize(schema);\n\n\t\t/** @ignore */\n\t\tthis._storeOption = {autoIncrement: true};\n\n\t\t/**\n\t\t * Primary key of this schema.\n\t\t *\n\t\t * This value will be null if not set primary key.\n\t\t *\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.primaryKey = null;\n\n\t\t/**\n\t\t * Column names that indexed with ngram for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.ngramIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that indexed with word for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.wordIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that unique indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.uniqueIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that normal indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.normalIndexes = new Set();\n\n\t\tfor (let x in schema) {\n\t\t\tschemaCheck(this._schema);\n\n\t\t\tif (this._schema[x].primary === true) {\n\t\t\t\tthis.primaryKey = x;\n\t\t\t\tthis._storeOption = {keyPath: x};\n\t\t\t} else if (this._schema[x].unique === true) {\n\t\t\t\tthis.uniqueIndexes.add(x);\n\t\t\t} else if (this._schema[x].normal !== false) {\n\t\t\t\tthis.normalIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].ngram || this._schema[x].fulltext) {\n\t\t\t\tthis.ngramIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].word) {\n\t\t\t\tthis.wordIndexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * All column names that indexed in some way.\n\t *\n\t * @type {Set<string>}\n\t */\n\tget indexes() {\n\t\tif (this.primaryKey) {\n\t\t\treturn new Set([this.primaryKey, ...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t} else {\n\t\t\treturn new Set([...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t}\n\t}\n}\n","import IFTSTransaction from './Transaction';\nimport IFTSSchema from './Schema';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or 'normal'.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t * 'unique' is columns that have a unique value in the database.\n\t * The 'normal' will enable when not primary and not unique.\n\t * 'primary', 'unique' and 'normal' column can numeric search (eg. {@link IndexedFTS#lower} or {@link IndexedFTS#between}).\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true, normal: false}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {object|IFTSSchema} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {IFTSSchema} */\n\t\tthis.schema = schema instanceof IFTSSchema ? schema : new IFTSSchema(schema);\n\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.schema._storeOption);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.schema.uniqueIndexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.schema.normalIndexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.schema.ngramIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.schema.wordIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.schema.ngramIndexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.schema.wordIndexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\treturn this.transaction().search(columns, query, options);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\treturn this.transaction().searchWord(columns, query, options);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\treturn this.transaction().getNGrams(column, options);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\treturn this.transaction().getWords(column, options);\n\t}\n}\n"],"names":["splitText","text","ngram","result","i","length","push","slice","splitWords","dedup","split","filter","x","tokenize","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","constructor","column","name","captureStackTrace","InvalidKeyError","key","InvalidSchemaError","reason","IFTSArrayPromise","indexes","promise","resolve","value","Promise","reject","then","catch","map","xs","sort","order","offset","limit","undefined","prototype","concat","call","y","_checkAndFilter","equals","lower","greater","lowerOrEquals","greaterOrEquals","between","upper","search","columns","options","c","ignoreCase","toLowerCase","queries","toLowerIfNeed","data","every","some","col","includes","searchWord","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","put","contents","store","objectStore","ngram_indexes","schema","ngramIndexes","index_prefix","word_indexes","wordIndexes","putPromises","req","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primaryKey","_key","_deleteIndex","tokens","promises","token","words","word","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","continue","keys","_readCursor","cursorRequest","getAll","openCursor","_getAllWithKeys","request","offsetFilter","get","_getAllWithIndex","keyRange","upperBound","lowerBound","bound","_takeCandidatesBySingleColumn","checkIncludes","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","_pruneCandidates","queries_num","result_num","size","queries_length","candidatePromises","apply","counts","hits","hits_count","_readIndexSet","Map","set","getNGrams","getWords","normalize","allowedOptions","opt","schemaCheck","primary","unique","normal","fulltext","fts","ftsFrom","IFTSSchema","_schema","_storeOption","autoIncrement","uniqueIndexes","normalIndexes","keyPath","IndexedFTS","version","window","indexedDB","deleteDatabase","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered"],"mappings":"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"}