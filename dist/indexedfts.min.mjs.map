{"version":3,"file":"indexedfts.min.mjs","sources":["../lib/utils.js","../lib/errors.js","../lib/IFTSArrayPromise.js","../lib/IFTSTransaction.js","../lib/IFTSSchema.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidSchemaError means specified invalid schema.\n */\nexport class InvalidSchemaError extends Error {\n\t/**\n\t * @param {string} reason - why throws this error.\n\t * @param {string|string[]|null} column - name of column that invalid.\n\t */\n\tconstructor(reason, column=null) {\n\t\tsuper(reason);\n\n\t\t/**\n\t\t * Name of column that invalid.\n\t\t *\n\t\t * @type {string|string[]|null}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = 'InvalidSchemaError';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidSchemaError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => data[col].includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitWords(query);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(data[col]).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './IFTSArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.schema.ngramIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.schema.wordIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.schema.ngramIndexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.schema.wordIndexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries) {\n\t\tconst index = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column).index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(x => x.data[column].includes(q)).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(x => x.data[column].includes(q)).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.ngramIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.schema.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.wordIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst index = this.transaction.objectStore(this.db.index_prefix + 'word_' + col).index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column) {\n\t\tif (!this.db.schema.ngramIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst result = new Map();\n\n\t\tconst cursor = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column).openCursor();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.value.token, (result.get(cursor.value.token) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column) {\n\t\tif (!this.db.schema.wordIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst result = new Map();\n\n\t\tconst cursor = this.transaction.objectStore(this.db.index_prefix + 'word_' + column).openCursor();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.value.word, (result.get(cursor.value.word) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n}\n","import {InvalidSchemaError} from './errors';\n\n\n/** @ignore */\nfunction normalize(schema) {\n\tconst allowedOptions = new Set(['primary', 'unique', 'ngram', 'fulltext', 'word']);\n\n\tconst result = {};\n\tfor (const col in schema) {\n\t\tresult[col] = {};\n\n\t\tif (typeof schema[col] === 'object') {\n\t\t\tfor (const opt in schema[col]) {\n\t\t\t\tif (!allowedOptions.has(opt)) {\n\t\t\t\t\tthrow new InvalidSchemaError(opt + ' is unknown option', col);\n\t\t\t\t}\n\t\t\t\tresult[col][opt] = schema[col][opt];\n\t\t\t}\n\t\t} else if (typeof schema[col] === 'string') {\n\t\t\tif (!allowedOptions.has(schema[col])) {\n\t\t\t\tthrow new InvalidSchemaError(schema[col] + ' is unknown option', col);\n\t\t\t}\n\t\t\tresult[col][schema[col]] = true;\n\t\t} else {\n\t\t\tthrow new InvalidSchemaError((typeof schema[col]) + ' is invalid option type', col);\n\t\t}\n\t}\n\treturn result;\n}\n\n\n/** @ignore */\nfunction schemaCheck(schema) {\n\tlet primaryKey = null;\n\n\tfor (const col in schema) {\n\t\tif (schema[col].primary !== undefined) {\n\t\t\tif (typeof schema[col].primary !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"primary\" option must be boolean', col);\n\t\t\t}\n\t\t\tif (schema[col].primary) {\n\t\t\t\tif (primaryKey !== null) {\n\t\t\t\t\tthrow new InvalidSchemaError('can not use multiple primary key', [col, primaryKey]);\n\t\t\t\t}\n\t\t\t\tprimaryKey = col;\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].unique !== undefined) {\n\t\t\tif (typeof schema[col].unique !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"unique\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].primary && schema[col].unique) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"unique\" option to same column', col);\n\t\t}\n\n\t\tif (schema[col].ngram !== undefined && schema[col].fulltext !== undefined) {\n\t\t\tthrow new InvalidSchemaError('can not set both of \"ngram\" option and \"fulltext\" option to same column', col);\n\t\t}\n\t\tconst fts = schema[col].ngram === undefined ? schema[col].fulltext : schema[col].ngram;\n\t\tconst ftsFrom = schema[col].ngram === undefined ? 'fulltext' : 'ngram';\n\t\tif (fts !== undefined && typeof fts !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError(`\"${ftsFrom}\" option must be boolean`, col);\n\t\t}\n\n\t\tif (schema[col].word !== undefined && typeof schema[col].word !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError('\"word\" option must be boolean', col);\n\t\t}\n\t}\n}\n\n\n/**\n * The database schema of IndexedFTS.\n */\nclass IFTSSchema {\n\t/**\n\t * Create IFTSSchema.\n\t *\n\t * @param {object} schema - please see same name param of {@link IndexedFTS#constructor}.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(schema) {\n\t\t/** @ignore */\n\t\tthis._schema = normalize(schema);\n\n\t\t/** @ignore */\n\t\tthis._storeOption = {autoIncrement: true};\n\n\t\t/**\n\t\t * Primary key of this schema.\n\t\t *\n\t\t * This value will be null if not set primary key.\n\t\t *\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.primaryKey = null;\n\n\t\t/**\n\t\t * Column names that indexed with ngram for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.ngramIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that indexed with word for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.wordIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that unique indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.uniqueIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that normal indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.normalIndexes = new Set();\n\n\t\tfor (let x in schema) {\n\t\t\tschemaCheck(this._schema);\n\n\t\t\tif (this._schema[x].primary) {\n\t\t\t\tthis.primaryKey = x;\n\t\t\t\tthis._storeOption = {keyPath: x};\n\t\t\t} else if (this._schema[x].unique) {\n\t\t\t\tthis.uniqueIndexes.add(x);\n\t\t\t} else {\n\t\t\t\tthis.normalIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].ngram || this._schema[x].fulltext) {\n\t\t\t\tthis.ngramIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].word) {\n\t\t\t\tthis.wordIndexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * All column names that indexed in some way.\n\t *\n\t * @type {Set<string>}\n\t */\n\tget indexes() {\n\t\tif (this.primaryKey) {\n\t\t\treturn new Set([this.primaryKey, ...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t} else {\n\t\t\treturn new Set([...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t}\n\t}\n}\n\n\nexport {IFTSSchema as default, normalize, schemaCheck};\n","import IFTSTransaction from './IFTSTransaction';\nimport IFTSSchema from './IFTSSchema';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or normal index.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t *\n\t * 'unique' is columns that have a unique value in the database.\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * The normal index that not set optioned that not unique, not primary, and not indexed for full-text search. You can numeric search like {@link IndexedFTS#lower} {@link IndexedFTS#between} even if not set option.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {object|IFTSSchema} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {IFTSSchema} */\n\t\tthis.schema = schema instanceof IFTSSchema ? schema : new IFTSSchema(schema);\n\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.schema._storeOption);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.schema.uniqueIndexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.schema.normalIndexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.schema.ngramIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.schema.wordIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.schema.ngramIndexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.schema.wordIndexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query) {\n\t\treturn this.transaction().search(columns, query);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query) {\n\t\treturn this.transaction().searchWord(columns, query);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column) {\n\t\treturn this.transaction().getNGrams(column);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column) {\n\t\treturn this.transaction().getWords(column);\n\t}\n}\n"],"names":["splitText","text","ngram","result","i","length","push","slice","splitWords","dedup","split","filter","x","tokenize","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","column","name","captureStackTrace","this","InvalidKeyError","key","InvalidSchemaError","reason","IFTSArrayPromise","indexes","promise","value","Promise","resolve","reject","then","catch","xs","map","order","offset","limit","prototype","concat","call","sort","y","undefined","_checkAndFilter","lower","upper","columns","c","queries","data","every","some","col","includes","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","contents","store","objectStore","ngram_indexes","schema","ngramIndexes","index_prefix","word_indexes","wordIndexes","putPromises","req","put","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primaryKey","_key","_deleteIndex","tokens","promises","words","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","continue","keys","cursorRequest","_readCursor","openCursor","request","offsetFilter","get","keyRange","_getAllWithIndex","upperBound","lowerBound","bound","_getAllWithKeys","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","queries_num","result_num","size","queries_length","candidatePromises","apply","_takeCandidatesBySingleColumn","_pruneCandidates","counts","hits","hits_count","Map","set","token","word","normalize","allowedOptions","opt","schemaCheck","primary","unique","fulltext","fts","ftsFrom","IFTSSchema","_schema","_storeOption","autoIncrement","uniqueIndexes","normalIndexes","keyPath","IndexedFTS","version","options","window","indexedDB","deleteDatabase","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered","getAll","equals","greater","lowerOrEquals","greaterOrEquals","between","search","searchWord","getNGrams","getWords"],"mappings":"AAKA,SAAgBA,UAAUC,EAAMC,EAAM,SAC/BC,SACD,IAAIC,EAAE,EAAGA,EAAEH,EAAKI,OAAOH,EAAM,EAAGE,MAC7BE,KAAKL,EAAKM,MAAMH,EAAGA,EAAEF,WAEtBC,EASR,SAAgBK,WAAWP,UACnBQ,MAAMR,EAAKS,MAAM,OAAOC,OAAOC,GAAKA,EAAEP,OAAS,IASvD,SAAgBQ,SAASZ,EAAMC,EAAM,UAC7BO,MAAMT,UAAUC,EAAMC,IAS9B,SAAgBY,WAAWC,EAAOb,EAAM,SACjCC,cACAO,MAAM,OAAOC,OAAOK,GAAKA,EAAEX,OAAS,GAAGY,QAAQD,GAAKb,EAAOa,GAAKH,SAASG,EAAGd,IAC3EC,EASR,SAAgBM,MAAMS,SACff,EAAS,IAAIgB,MAAMD,EAAMb,QACzBe,EAAQ,IAAIC,QACdC,EAAM,MAEL,IAAIlB,EAAE,EAAGA,EAAEc,EAAMb,OAAQD,IACxBgB,EAAMG,IAAIL,EAAMd,QACdoB,IAAIN,EAAMd,MACTkB,GAAOJ,EAAMd,eAKfD,EAAOI,MAAM,EAAGe,GASxB,SAAgBG,QAAQP,EAAOQ,SACxBvB,EAAS,IAAIgB,MAAMD,EAAMb,YAC1B,IAAID,EAAE,EAAGA,EAAEc,EAAMb,OAAQD,MACtBA,GAAKsB,EAAIR,EAAMd,WAEhBD,EASR,SAAgBwB,QAAQT,OACnBb,EAAS,MACR,IAAID,EAAE,EAAGA,EAAEc,EAAMb,OAAQD,OACnBc,EAAMd,GAAGC,aAGdF,EAAS,IAAIgB,MAAMd,OACrBiB,EAAM,MACL,IAAIlB,EAAE,EAAGA,EAAEc,EAAMb,OAAQD,QACxB,IAAIwB,EAAE,EAAGA,EAAEV,EAAMd,GAAGC,OAAQuB,MACzBN,GAAOJ,EAAMd,GAAGwB,cAKlBzB,QCnGK0B,0BAA0BC,kBAI1BC,SACLA,EAAS,uCAOVA,OAASA,OAGTC,KAAO,GAERF,MAAMG,yBACHA,kBAAkBC,KAAML,0BASpBM,wBAAwBL,kBAIxBM,SACL,oBAODA,IAAMA,OAGNJ,KAAO,GAERF,MAAMG,yBACHA,kBAAkBC,KAAMC,wBASpBE,2BAA2BP,kBAK3BQ,EAAQP,EAAO,YACpBO,QAODP,OAASA,OAGTC,KAAO,qBAERF,MAAMG,yBACHA,kBAAkBC,KAAMG,2BCjEZE,6BAKRC,EAASC,QAEfD,QAAUA,OAGVC,QAAUA,iBAWDD,EAASE,aAChB,IAAIH,iBAAiBC,EAASG,QAAQC,QAAQF,kBAWxCF,EAASE,EAAM,aACrB,IAAIH,iBAAiBC,EAASG,QAAQE,OAAOH,SAUhDhB,UACGQ,KAAKO,QAAQK,KAAKpB,SAUpBA,UACEQ,KAAKO,QAAQM,MAAMrB,OAUvBA,UACI,IAAIa,iBAAiBL,KAAKM,QAASN,KAAKY,KAAKE,GAAMA,EAAGC,IAAIvB,YAU3DA,UACC,IAAIa,iBAAiBL,KAAKM,QAASN,KAAKY,KAAKE,GAAMA,EAAGrC,OAAOe,UAahEK,EAAQmB,EAAM,MAAOC,EAAO,EAAGC,UAC9BlB,KAAKM,QAAQjB,IAAIQ,GAIf,IAAIQ,iBAAiBL,KAAKM,QAASN,KAAKY,KAAKE,GAAM7B,MAAMkC,UAAUC,OAAOC,QAASP,GAAIQ,KAAK,CAAC5C,EAAG6C,IAClG7C,EAAEmB,GAAU0B,EAAE1B,GACA,SAAVmB,EAAmB,GAAK,EACrBtC,EAAEmB,GAAU0B,EAAE1B,GACP,SAAVmB,GAAoB,EAAI,EAExB,GAEN3C,MAAM4C,OAAkBO,IAAVN,OAAsBM,EAAYP,EAASC,KAXpDb,iBAAiBM,OAAOX,KAAKM,QAAS,IAAIX,kBAAkBE,oBAmBrDA,EAAQL,UAClBQ,KAAKM,QAAQjB,IAAIQ,GAIfG,KAAKvB,OAAOe,GAHXa,iBAAiBM,OAAOX,KAAKM,QAAS,IAAIX,kBAAkBE,WAc9DA,EAAQW,UACPR,KAAKyB,gBAAgB5B,EAAQnB,GAAKA,EAAEmB,KAAYW,SAWlDX,EAAQW,UACNR,KAAKyB,gBAAgB5B,EAAQnB,GAAKA,EAAEmB,GAAUW,WAW9CX,EAAQW,UACRR,KAAKyB,gBAAgB5B,EAAQnB,GAAKA,EAAEmB,GAAUW,iBAWxCX,EAAQW,UACdR,KAAKyB,gBAAgB5B,EAAQnB,GAAKA,EAAEmB,IAAWW,mBAWvCX,EAAQW,UAChBR,KAAKyB,gBAAgB5B,EAAQnB,GAAKA,EAAEmB,IAAWW,WAY/CX,EAAQ6B,EAAOC,UACf3B,KAAKyB,gBAAgB5B,EAAQnB,GAAKgD,GAAShD,EAAEmB,IAAWnB,EAAEmB,IAAW8B,UAiBtEC,EAAS/C,GACQ,iBAAZ+C,OACCA,QAGP,IAAIC,KAAKD,MACR5B,KAAKM,QAAQjB,IAAIwC,UACdxB,iBAAiBM,OAAOX,KAAKM,QAAS,IAAIX,kBAAkBkC,UAI/DC,SACD,IAAIhD,KAAKF,WAAWC,KAChBT,KAAKU,UAGPkB,KAAKvB,OAAOsD,GAAQD,EAAQE,MAAMlD,GAAK8C,EAAQK,KAAKC,GAAOH,EAAKG,GAAKC,SAASrD,iBAiB3E8C,EAAS/C,GACI,iBAAZ+C,OACCA,QAGP,IAAIC,KAAKD,MACR5B,KAAKM,QAAQjB,IAAIwC,UACdxB,iBAAiBM,OAAOX,KAAKM,QAAS,IAAIX,kBAAkBkC,UAI/DC,EAAUxD,WAAWO,UAEpBmB,KAAKvB,OAAOsD,GAAQD,EAAQE,MAAMlD,GAAK8C,EAAQK,KAAKC,GACnD5D,WAAWyD,EAAKG,IAAMC,SAASrD,aC3PpBsD,4BAKRC,EAAIC,QAEVD,GAAKA,OAGLC,YAAcA,OAGdC,UAAYvC,KAAKqC,GAAGG,MAAMC,iBAO1BlC,QAAU,IAAIE,QAAQ,CAACC,EAASC,UAC/B2B,YAAYI,WAAa,KAAMhC,EAAQV,KAAKqC,UAC5CC,YAAYK,QAAUC,CAAAA,GAAOjC,EAAOiC,WAIrCC,iBAUCC,SACAC,EAAQ/C,KAAKsC,YAAYU,YAAY,QACrCC,EAAgB1D,YAAYS,KAAKqC,GAAGa,OAAOC,cAAetD,KAAYC,KAAMD,EAAQkD,MAAO/C,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,SAAWvD,MAC1JwD,EAAe9D,YAAYS,KAAKqC,GAAGa,OAAOI,aAAczD,KAAYC,KAAMD,EAAQkD,MAAO/C,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,QAAUvD,MAEvJ0D,EAAc,IAAItE,MAAM6D,EAAS3E,YAClC,IAAID,EAAE,EAAGA,EAAE4E,EAAS3E,OAAQD,MACpBA,GAAK,IAAIuC,QAAQ,CAACC,EAASC,WAChC6C,EAAMT,EAAMU,IAAIX,EAAS5E,MAC3ByE,QAAUhC,IACV+C,UAAYC,CAAAA,MAEd3D,KAAK4D,kBAAkBD,EAAGE,OAAO5F,OAAQ6E,EAAS5E,GAAI+E,GACpDrC,KAAK,IAAMZ,KAAK8D,iBAAiBH,EAAGE,OAAO5F,OAAQ6E,EAAS5E,GAAImF,gBAK/D5C,QAAQsD,IAAIR,GAAa3C,KAAKmB,QAC/B,IAAI7D,EAAE,EAAGA,EAAE6D,EAAK5D,OAAQD,IAAK,OAC3BgC,EAAM6B,EAAK7D,GAAG,GACdsC,EAAQuB,EAAK7D,GAAG,GACY,OAA9B8B,KAAKqC,GAAGa,OAAOc,eACZC,KAAO/D,QAET2C,OAAO3C,GAAOM,SAEbR,yBASSE,EAAK6B,EAAMkB,UACrBjD,KAAKkE,aAAahE,EAAK+C,EAAclC,IAAIrC,GAAKsB,KAAKqC,GAAGe,aAAe,SAAW1E,EAAEoB,OACvFc,KAAK,IAAMH,QAAQsD,IAAIxE,QAAQ0D,EAAef,UACxCiC,EAASxF,SAASoD,EAAKG,EAAIpC,OAC3BsE,EAAW,IAAInF,MAAMkF,EAAOhG,YAC7B,IAAID,EAAE,EAAGA,EAAEiG,EAAOhG,OAAQD,MACrBA,GAAK,IAAIuC,QAAQ,CAACC,EAASC,WAC7B6C,EAAMtB,EAAIa,MAAMU,SAChBvD,QACEiE,EAAOjG,OAEXwF,UAAY,KAAMhD,OAClBiC,QAAUhC,WAGTF,QAAQsD,IAAIK,OAEnBxD,KAAK,KAAOV,EAAK6B,qBAQH7B,EAAK6B,EAAMsB,UACpBrD,KAAKkE,aAAahE,EAAKmD,EAAatC,IAAIrC,GAAKsB,KAAKqC,GAAGe,aAAe,QAAU1E,EAAEoB,OACrFc,KAAK,IAAMH,QAAQsD,IAAIxE,QAAQ8D,EAAcnB,UACvCmC,EAAQ/F,WAAWyD,EAAKG,EAAIpC,OAC5BsE,EAAW,IAAInF,MAAMoF,EAAMlG,YAC5B,IAAID,EAAE,EAAGA,EAAEmG,EAAMlG,OAAQD,MACpBA,GAAK,IAAIuC,QAAQ,CAACC,EAASC,WAC7B6C,EAAMtB,EAAIa,MAAMU,SAChBvD,OACCmE,EAAMnG,OAETwF,UAAY,KAAMhD,OAClBiC,QAAUhC,WAGTF,QAAQsD,IAAIK,OAEnBxD,KAAK,KAAOV,EAAK6B,iBAQP7B,EAAKoE,UACV7D,QAAQsD,IAAIO,EAAWvD,IAAIwD,GAC1B,IAAI9D,QAAQ,CAACC,EAASC,WACtBoC,EAAQ/C,KAAKsC,YAAYU,YAAYuB,KACrC5B,QAAUhC,QAEV6D,KAEAhB,EAAMT,EAAM7D,MAAM,OAAOuF,cAAczE,KAAKuC,UAAUmC,KAAKxE,MAC7DyC,QAAUhC,IACV+C,UAAYC,CAAAA,UACTgB,EAAShB,EAAGE,OAAO5F,OACrB0G,KACMvG,KAAK,IAAIqC,QAAQ,CAACC,EAASC,WAC7BiE,EAAI7B,EAAM8B,OAAOF,EAAOX,cAC5BN,UAAYhD,IACZiC,QAAUhC,OAENmE,cAECrE,QAAQsD,IAAIS,oBAcfO,OACJ,IAAI7G,EAAE,EAAGA,EAAE6G,EAAK5G,OAAQD,OACZ,OAAZ6G,EAAK7G,SAA2BsD,IAAZuD,EAAK7G,UACrBuC,QAAQE,OAAO,IAAIV,gBAAgB8E,EAAK7G,YAI1CuC,QAAQsD,IAAIxE,QAAQwF,EAAM7E,GACzB,IAAIO,QAAQ,CAACC,EAASC,WACtB6C,EAAMxD,KAAKsC,YAAYU,YAAY,QAAQ6B,OAAO3E,KACpDyC,QAAUhC,IACV+C,UAAYhD,IAEhBE,KAAK,IAAMZ,KAAKkE,aAAahE,UACtBF,KAAKqC,GAAGa,OAAOC,cAAcpC,IAAIrC,GAAKsB,KAAKqC,GAAGe,aAAe,SAAW1E,UACxEsB,KAAKqC,GAAGa,OAAOI,aAAavC,IAAIrC,GAAKsB,KAAKqC,GAAGe,aAAe,QAAU1E,QAE3EkC,KAAK,IAAMZ,kBAQJgF,EAAevG,EAAO,KAAMsC,EAAI,KAAMG,YACxCzC,KAAYC,EAAGR,KAAM,KACxB6C,KAASrC,EAAGR,IAAMQ,GAEjB,IAAI2B,iBAAiBL,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIG,QAAQ,CAACC,EAASC,WACnE1C,SACFiB,EAAQ,IAEEwE,UAAYC,CAAAA,UACnBgB,EAAShB,EAAGE,OAAO5F,UACrB0G,EAAQ,OACLnE,EAAQmE,EAAOnE,MACa,OAA9BR,KAAKqC,GAAGa,OAAOc,eACZC,KAAOU,EAAOzE,UAEhB2C,OAAO8B,EAAOzE,KAAOM,EACtB/B,EAAO+B,EAAOtB,MACVd,KAAK2C,EAAIP,EAAOtB,aAIVsC,IAAVN,GAAuBhC,EAAQgC,IAC3B4D,aAEC7G,UAGDA,OAGI0E,QAAUC,CAAAA,GAAOjC,EAAOiC,uBAUhC5C,KAAKiF,YAAYjF,KAAKsC,YAAYU,YAAY,QAAQkC,uCAStD,IAAI7E,iBAAiBL,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIG,QAAQ,CAACC,EAASC,WACnEwE,EAAUnF,KAAKsC,YAAYU,YAAY,QAAQkC,aAE/CjH,OACEyF,UAAYC,CAAAA,UACbgB,EAAShB,EAAGE,OAAO5F,UACrB0G,EAAQ,OACLnE,EAAQmE,EAAOnE,MACa,OAA9BR,KAAKqC,GAAGa,OAAOc,eACZC,KAAOU,EAAOzE,UAEhB2C,OAAO8B,EAAOzE,KAAOM,IACnBpC,MAAM8B,IAAKyE,EAAOzE,IAAK6B,KAAMvB,MAC7BsE,kBAEC7G,OAIF0E,QAAUC,CAAAA,GAAOjC,EAAOiC,WAa9BpD,UACIQ,KAAKiF,YAAYjF,KAAKsC,YAAYU,YAAY,QAAQkC,WAAW,MAAO,KAAM1F,UAY/EA,UACCQ,KAAKiF,YAAYjF,KAAKsC,YAAYU,YAAY,QAAQkC,WAAW,MAAO1F,EAAK,WAahFK,EAAQmB,EAAM,MAAOC,EAAO,EAAGC,OAC9BlB,KAAKqC,GAAGa,OAAO5C,QAAQjB,IAAIQ,UACxBQ,iBAAiBM,OAAOX,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIX,kBAAkBE,WAG5D2B,IAAVN,OAAsBM,EAAYP,EAASC,QAC7CkE,EAAe,CAAC1G,EAAGR,IAAM+C,GAAU/C,EAEnC6E,EAAQ/C,KAAKsC,YAAYU,YAAY,eAEvCnD,IAAWG,KAAKqC,GAAGa,OAAOc,WACtBhE,KAAKiF,YAAYlC,EAAMmC,WAAW,KAAgB,SAAVlE,EAAmB,OAAS,QAASoE,EAAc,KAAMlE,GAEjGlB,KAAKiF,YAAYlC,EAAM7D,MAAMW,GAAQqF,WAAW,KAAgB,SAAVlE,EAAmB,OAAS,QAASoE,EAAc,KAAMlE,OAWpHhB,UACS,OAARA,QAAwBsB,IAARtB,EACZO,QAAQE,OAAO,IAAIV,gBAAgBC,IAEvCA,KAAOF,KAAK6C,OACRpC,QAAQC,QAAQV,KAAK6C,OAAO3C,IAE7B,IAAIO,QAAQ,CAACC,EAASC,WACtB6C,EAAMxD,KAAKsC,YAAYU,YAAY,QAAQqC,IAAInF,KACjDwD,UAAYC,CAAAA,UACTnD,EAAQmD,EAAGE,OAAO5F,OACU,OAA9B+B,KAAKqC,GAAGa,OAAOc,eACZC,KAAO/D,QAET2C,OAAO3C,GAAOM,IACXA,OAELmC,QAAUhC,qBASCd,EAAQyF,OACnBtF,KAAKqC,GAAGa,OAAO5C,QAAQjB,IAAIQ,UACxBQ,iBAAiBM,OAAOX,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIX,kBAAkBE,UAGxEkD,EAAQ/C,KAAKsC,YAAYU,YAAY,eAEvCnD,IAAWG,KAAKqC,GAAGa,OAAOc,WACtBhE,KAAKiF,YAAYlC,EAAMmC,WAAWI,IAElCtF,KAAKiF,YAAYlC,EAAM7D,MAAMW,GAAQqF,WAAWI,WAYlDzF,EAAQW,UACPR,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUmC,KAAKlE,UAWpDX,EAAQW,UACNR,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUiD,WAAWhF,GAAO,YAW/DX,EAAQW,UACRR,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUkD,WAAWjF,GAAO,kBAWzDX,EAAQW,UACdR,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUiD,WAAWhF,GAAO,oBAWvDX,EAAQW,UAChBR,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUkD,WAAWjF,GAAO,YAY/DX,EAAQ6B,EAAOC,UACf3B,KAAKuF,iBAAiB1F,EAAQG,KAAKuC,UAAUmD,MAAMhE,EAAOC,GAAO,GAAO,kCAQlD9B,EAAQiC,SAC/B5C,EAAQc,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,SAAWvD,GAAQX,MAAM,SACrFjB,SAED,IAAIa,KAAKgD,EAAS,IACI,IAAtBA,EAAQhD,GAAGX,OAAc,GACrBC,KAAK4B,KAAK2F,kBAAkBlH,OAAOC,GAAKA,EAAEqD,KAAKlC,GAAQsC,SAASrD,IAAIiC,IAAIrC,GAAKA,EAAEwB,KAAKU,KAAKE,KAAQjC,MAAOC,EAAGiG,KAAMjE,qBAInHsD,EAAW,IAAInF,MAAM6C,EAAQhD,GAAGX,YACjC,IAAID,EAAE,EAAGA,EAAE4D,EAAQhD,GAAGX,OAAQD,MACzBA,GAAK8B,KAAKiF,YAAY/F,EAAMgG,WAAWpD,EAAQhD,GAAGZ,IAAK,KAAM6D,GAAQA,EAAK7B,WAG9E0F,EAAYnF,QAAQsD,IAAIK,GAC5BxD,KAAKiF,OACiB,IAAlBA,EAAO1H,cACHsC,QAAQC,cAGPjB,QAAQoG,SAEXC,EAAU,IAAI7G,MAAM4G,EAAO1H,YAC7B4H,EAAY,QACVC,SACD,IAAI9H,EAAE,EAAGA,EAAE2H,EAAO1H,OAAQD,IACxB2H,EAAO3H,KAAM8H,MACRH,EAAO3H,IAAM,IAEf6H,GAAaF,EAAO3H,UAGnB2H,EAAO3H,YAGZ+H,EAAa,IAAIhH,MAAM8G,OACzBG,EAAgB,MACf,IAAIhI,EAAE,EAAGA,EAAE6H,EAAW7H,IACtB8H,EAAUF,EAAQ5H,KAAO4D,EAAQhD,GAAGX,WAC5B+H,GAAiBlG,KAAKqF,IAAIS,EAAQ5H,IAAI0C,KAAKmB,KAAU7B,IAAK4F,EAAQ5H,GAAI6D,KAAMA,iBAIlFtB,QAAQsD,IAAIkC,EAAW5H,MAAM,EAAG6H,MAEvCtF,KAAKE,KAAQjC,MAAOC,EAAGiG,KAAMjE,EAAGrC,OAAOC,GAAKA,EAAEqD,KAAKlC,GAAQsC,SAASrD,IAAIiC,IAAIrC,GAAKA,EAAEwB,UAE9E9B,KAAKwH,UAGN3H,yBAQekI,EAAaF,SAC7BlB,SAED,IAAI7G,EAAE,EAAGA,EAAE+H,EAAW9H,OAAQD,QAC7B,IAAIwB,EAAE,EAAGA,EAAEuG,EAAW/H,GAAG6G,KAAK5G,OAAQuB,IACpCuG,EAAW/H,GAAG6G,KAAKrF,KAAMqF,MACzBkB,EAAW/H,GAAG6G,KAAKrF,IAAM,IAAIP,OAE9B8G,EAAW/H,GAAG6G,KAAKrF,IAAIJ,IAAI2G,EAAW/H,GAAGW,aAI1CZ,EAAS,IAAIgB,MAAMgH,EAAW9H,YAChCiI,EAAa,MACZ,IAAIlG,KAAO6E,EACXA,EAAK7E,GAAKmG,MAAQF,MACdC,GAAcpG,KAAKqF,IAAInF,qBAKnBO,QAAQsD,IAAI9F,EAAOI,MAAM,EAAG+H,WAenCxE,EAAS/C,GACQ,iBAAZ+C,OACCA,QAGP,IAAI1D,EAAE,EAAGA,EAAE0D,EAAQzD,OAAQD,QAC1B8B,KAAKqC,GAAGa,OAAOC,aAAa9D,IAAIuC,EAAQ1D,WACrCmC,iBAAiBM,OAAOX,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIX,kBAAkBiC,EAAQ1D,WAIjF4D,EAAUlD,WAAWC,OACvByH,EAAiB,MAEhB,IAAIxH,KAAKgD,IACLhD,GAAKS,QAAQuC,EAAQhD,GAAIJ,GAAKsB,KAAKuC,UAAUmC,KAAKhG,cAIrD6H,SAED,IAAIrI,EAAE,EAAGA,EAAE0D,EAAQzD,OAAQD,UACzBiD,UAAU/C,KAAKoI,MAAMD,EAAmBvG,KAAKyG,8BAA8B7E,EAAQ1D,GAAI4D,WAGvF,IAAIzB,iBACVL,KAAKqC,GAAGa,OAAO5C,QACfG,QAAQsD,IAAIwC,GAAmB3F,KAAKE,GAAMd,KAAK0G,iBAAiBJ,EAAgBxF,gBAgBvEc,EAAS/C,GACI,iBAAZ+C,OACCA,QAGP,IAAI1D,EAAE,EAAGA,EAAE0D,EAAQzD,OAAQD,QAC1B8B,KAAKqC,GAAGa,OAAOI,YAAYjE,IAAIuC,EAAQ1D,WACpCmC,iBAAiBM,OAAOX,KAAKqC,GAAGa,OAAO5C,QAAS,IAAIX,kBAAkBiC,EAAQ1D,WAIjF4D,EAAUxD,WAAWO,GAAOkC,IAAIrC,KAAOX,KAAMW,EAAG4G,SAAUtF,KAAKuC,UAAUmC,KAAKhG,aAE7E,IAAI2B,iBAAiBL,KAAKqC,GAAGa,OAAO5C,QAASG,QAAQsD,IAAItE,QAAQmC,EAAQb,IAAImB,UAC7EhD,EAAQc,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,QAAUlB,GAAKhD,MAAM,eAEhF4C,EAAQf,IAAIlC,GAASmB,KAAKiF,YAAY/F,EAAMgG,WAAWrG,EAAMyG,UAAW,KAAMvD,IAASA,EAAK7B,IAAKrB,EAAMd,YAC1G6C,KAAKqF,MACI1H,MAAMkB,QAAQwG,UAErBU,SACD,IAAIzI,EAAE,EAAGA,EAAE+H,EAAW9H,OAAQD,IAAK,OACjCgC,EAAM+F,EAAW/H,GAAG,GACpBgC,KAAOyG,MACLzG,GAAO,KAERA,WAGF0G,EAAO,IAAI3H,MAAMgH,EAAW9H,YAC9B0I,EAAa,MACZ,IAAI3I,EAAE,EAAGA,EAAE+H,EAAW9H,OAAQD,IAAK,OACjCgC,EAAM+F,EAAW/H,GAAG,GACtByI,EAAOzG,IAAQ4B,EAAQ3D,WACrB0I,GAAc3G,aAKfjC,EAAS,IAAIgB,MAAM4H,OACpB,IAAI3I,EAAE,EAAGA,EAAE2I,EAAY3I,MACpBA,GAAK8B,KAAKqF,IAAIuB,EAAK1I,WAEpB,IAAImC,iBAAiBL,KAAKqC,GAAGa,OAAO5C,QAASG,QAAQsD,IAAI9F,iBAWxD4B,OACJG,KAAKqC,GAAGa,OAAOC,aAAa9D,IAAIQ,UAC7BY,QAAQE,OAAO,IAAIhB,kBAAkBE,UAGvC5B,EAAS,IAAI6I,IAEbnC,EAAS3E,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,SAAWvD,GAAQqF,oBAC/E,IAAIzE,QAAQ,CAACC,EAASC,OACrB+C,UAAYC,CAAAA,UACZgB,EAAShB,EAAGE,OAAO5F,OACrB0G,KACIoC,IAAIpC,EAAOnE,MAAMwG,OAAQ/I,EAAOoH,IAAIV,EAAOnE,MAAMwG,QAAU,GAAK,KAChElC,cAEC7G,OAGH0E,QAAUgB,CAAAA,GAAMhD,EAAOgD,eAWvB9D,OACHG,KAAKqC,GAAGa,OAAOI,YAAYjE,IAAIQ,UAC5BY,QAAQE,OAAO,IAAIhB,kBAAkBE,UAGvC5B,EAAS,IAAI6I,IAEbnC,EAAS3E,KAAKsC,YAAYU,YAAYhD,KAAKqC,GAAGe,aAAe,QAAUvD,GAAQqF,oBAC9E,IAAIzE,QAAQ,CAACC,EAASC,OACrB+C,UAAYC,CAAAA,UACZgB,EAAShB,EAAGE,OAAO5F,OACrB0G,KACIoC,IAAIpC,EAAOnE,MAAMyG,MAAOhJ,EAAOoH,IAAIV,EAAOnE,MAAMyG,OAAS,GAAK,KAC9DnC,cAEC7G,OAGH0E,QAAUgB,CAAAA,GAAMhD,EAAOgD,OCxqBjC,SAASuD,UAAUhE,SACZiE,EAAiB,IAAIhI,KAAK,UAAW,SAAU,QAAS,WAAY,SAEpElB,SACD,MAAMiE,KAAOgB,OACVhB,MAEoB,iBAAhBgB,EAAOhB,OACZ,MAAMkF,KAAOlE,EAAOhB,GAAM,KACzBiF,EAAe9H,IAAI+H,SACjB,IAAIjH,mBAAmBiH,EAAM,qBAAsBlF,KAEnDA,GAAKkF,GAAOlE,EAAOhB,GAAKkF,OAE1B,CAAA,GAA2B,iBAAhBlE,EAAOhB,SAMlB,IAAI/B,0BAA2B+C,EAAOhB,GAAQ,0BAA2BA,OAL1EiF,EAAe9H,IAAI6D,EAAOhB,UACxB,IAAI/B,mBAAmB+C,EAAOhB,GAAO,qBAAsBA,KAE3DA,GAAKgB,EAAOhB,KAAQ,SAKtBjE,EAKR,SAASoJ,YAAYnE,OAChBc,EAAa,SAEZ,MAAM9B,KAAOgB,EAAQ,SACG1B,IAAxB0B,EAAOhB,GAAKoF,QAAuB,IACH,kBAAxBpE,EAAOhB,GAAKoF,cAChB,IAAInH,mBAAmB,mCAAoC+B,MAE9DgB,EAAOhB,GAAKoF,QAAS,IACL,OAAftD,QACG,IAAI7D,mBAAmB,oCAAqC+B,EAAK8B,MAE3D9B,WAIYV,IAAvB0B,EAAOhB,GAAKqF,QACmB,kBAAvBrE,EAAOhB,GAAKqF,aAChB,IAAIpH,mBAAmB,kCAAmC+B,MAI9DgB,EAAOhB,GAAKoF,SAAWpE,EAAOhB,GAAKqF,aAChC,IAAIpH,mBAAmB,6EAA8E+B,WAGlFV,IAAtB0B,EAAOhB,GAAKlE,YAAgDwD,IAAzB0B,EAAOhB,GAAKsF,eAC5C,IAAIrH,mBAAmB,0EAA2E+B,SAEnGuF,OAA4BjG,IAAtB0B,EAAOhB,GAAKlE,MAAsBkF,EAAOhB,GAAKsF,SAAWtE,EAAOhB,GAAKlE,MAC3E0J,OAAgClG,IAAtB0B,EAAOhB,GAAKlE,MAAsB,WAAa,gBACnDwD,IAARiG,GAAoC,kBAARA,QACzB,IAAItH,uBAAuBuH,4BAAmCxF,WAG5CV,IAArB0B,EAAOhB,GAAK+E,MAAkD,kBAArB/D,EAAOhB,GAAK+E,WAClD,IAAI9G,mBAAmB,gCAAiC+B,UAS3DyF,uBAQOzE,QAEN0E,QAAUV,UAAUhE,QAGpB2E,cAAgBC,eAAe,QAS/B9D,WAAa,UAObb,aAAe,IAAIhE,SAOnBmE,YAAc,IAAInE,SAOlB4I,cAAgB,IAAI5I,SAOpB6I,cAAgB,IAAI7I,QAEpB,IAAIT,KAAKwE,cACDlD,KAAK4H,SAEb5H,KAAK4H,QAAQlJ,GAAG4I,cACdtD,WAAatF,OACbmJ,cAAgBI,QAASvJ,IACpBsB,KAAK4H,QAAQlJ,GAAG6I,YACrBQ,cAAczI,IAAIZ,QAElBsJ,cAAc1I,IAAIZ,IAGpBsB,KAAK4H,QAAQlJ,GAAGV,OAASgC,KAAK4H,QAAQlJ,GAAG8I,gBACvCrE,aAAa7D,IAAIZ,GAGnBsB,KAAK4H,QAAQlJ,GAAGuI,WACd3D,YAAYhE,IAAIZ,wBAWnBsB,KAAKgE,WACD,IAAI7E,KAAKa,KAAKgE,cAAehE,KAAK+H,iBAAkB/H,KAAKgI,gBAEzD,IAAI7I,QAAQa,KAAK+H,iBAAkB/H,KAAKgI,uBCvJ7BE,uBAqCRpI,EAAMqI,EAASjF,EAAQkF,WAE7BhF,aAAegF,EAAQhF,cAAgB,mBAGvCZ,MAAQ4F,EAAQ5F,OAAS6F,YAGzBvI,KAAOA,OAGPqI,QAAUA,OAGVjF,OAASA,aAAkByE,WAAazE,EAAS,IAAIyE,WAAWzE,QAIhEb,GAAK,mBAaGvC,EAAM0C,EAAM,aAClB,IAAI/B,QAAQ,CAACC,EAASC,WACtB6C,GAAOhB,GAAS6F,QAAQC,UAAUC,eAAezI,KACnD4D,UAAYC,CAAAA,GAAMjD,OAClBiC,QAAUgB,CAAAA,GAAMhD,EAAOgD,oBAUrB,IAAIlD,QAAQ,CAACC,EAASC,WACtBwE,EAAUnF,KAAKwC,MAAM8F,UAAUE,KAAKxI,KAAKF,KAAME,KAAKmI,WAElDzE,UAAYC,CAAAA,SACdtB,GAAKsB,EAAGE,OAAO5F,SACZ+B,UAED2C,QAAUhC,IAEV8H,gBAAkB9E,CAAAA,SACpBtB,GAAKsB,EAAGE,OAAO5F,aAEd8E,EAAQ/C,KAAKqC,GAAGqG,kBAAkB,OAAQ1I,KAAKkD,OAAO2E,gBAEtDlF,QAAUhC,OAEXuC,OAAO6E,cAAchJ,QAAQL,GAAKqE,EAAM4F,YAAYjK,EAAGA,GAAI6I,QAAQ,UAEnErE,OAAO8E,cAAcjJ,QAAQL,GAAKqE,EAAM4F,YAAYjK,EAAGA,GAAI6I,QAAQ,UAEnErE,OAAOC,aAAapE,QAAQc,UAC1B+I,EAAY5I,KAAKqC,GAAGqG,kBAAkB1I,KAAKoD,aAAe,SAAWvD,GAASiI,eAAe,MACzFnF,QAAUhC,IACVgI,YAAY,MAAO,OAAQpB,QAAQ,MACnCoB,YAAY,QAAS,SAAUpB,QAAQ,WAG7CrE,OAAOI,YAAYvE,QAAQc,UACzB+I,EAAY5I,KAAKqC,GAAGqG,kBAAkB1I,KAAKoD,aAAe,QAAUvD,GAASiI,eAAe,MACxFnF,QAAUhC,IACVgI,YAAY,MAAO,OAAQpB,QAAQ,MACnCoB,YAAY,OAAQ,QAASpB,QAAQ,uBAU7ClF,GAAGwG,oBAWGC,EAAK,WAAYjF,EAAO,SACpB,OAAXA,EAAiB,OACdkF,MAAa/I,KAAKkD,OAAOC,cAAcpC,IAAIrC,GAAKsB,KAAKoD,aAAe,SAAW1E,GAC/E2F,MAAYrE,KAAKkD,OAAOI,aAAavC,IAAIrC,GAAKsB,KAAKoD,aAAe,QAAU1E,KACzEqK,EAAO3H,OAAOiD,GAAOjD,QAAQ,gBAEhC,IAAIgB,gBAAgBpC,KAAMA,KAAKqC,GAAGC,YAAYuB,EAAQiF,WAUvDhG,UACC9C,KAAKsC,YAAY,aAAamB,OAAOX,GAAUlC,KAAK,IAAMZ,gBAUxD+E,UACF/E,KAAKsC,YAAY,aAAauC,UAAUE,GAAMnE,KAAK,IAAMZ,UAU7DE,UACIF,KAAKsC,YAAY,WAAY,QAAQ+C,IAAInF,gBAQpCV,UACLA,EAAIQ,KAAKsC,YAAY,WAAY,yBASjCtC,KAAKgJ,aAAatK,GAAKA,EAAEuK,cAY7BzJ,UACIQ,KAAKgJ,aAAatK,GAAKA,EAAEqC,IAAIvB,WAY9BA,UACCQ,KAAKgJ,aAAatK,GAAKA,EAAED,OAAOe,SAanCK,EAAQmB,EAAM,MAAOC,EAAO,EAAGC,UAC5BlB,KAAKgJ,aAAatK,GAAKA,EAAE4C,KAAKzB,EAAQmB,EAAOC,EAAQC,WAWtDrB,EAAQW,UACPR,KAAKgJ,aAAatK,GAAKA,EAAEwK,OAAOrJ,EAAQW,UAW1CX,EAAQW,UACNR,KAAKgJ,aAAatK,GAAKA,EAAEgD,MAAM7B,EAAQW,YAWvCX,EAAQW,UACRR,KAAKgJ,aAAatK,GAAKA,EAAEyK,QAAQtJ,EAAQW,kBAWnCX,EAAQW,UACdR,KAAKgJ,aAAatK,GAAKA,EAAE0K,cAAcvJ,EAAQW,oBAWvCX,EAAQW,UAChBR,KAAKgJ,aAAatK,GAAKA,EAAE2K,gBAAgBxJ,EAAQW,YAYjDX,EAAQ6B,EAAOC,UACf3B,KAAKgJ,aAAatK,GAAKA,EAAE4K,QAAQzJ,EAAQ6B,EAAOC,WAejDC,EAAS/C,UACRmB,KAAKsC,cAAciH,OAAO3H,EAAS/C,cAehC+C,EAAS/C,UACZmB,KAAKsC,cAAckH,WAAW5H,EAAS/C,aAUrCgB,UACFG,KAAKsC,cAAcmH,UAAU5J,YAU5BA,UACDG,KAAKsC,cAAcoH,SAAS7J"}