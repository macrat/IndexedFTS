{"version":3,"file":"indexedfts.min.js","sources":["../lib/utils.js","../lib/errors.js","../lib/ArrayPromise.js","../lib/Transaction.js","../lib/Schema.js","../lib/IndexedFTS.js"],"sourcesContent":["/**\n * Splitting text to n-gram\n *\n * @ignore\n */\nexport function splitText(text, ngram=2) {\n\tconst result = [];\n\tfor (let i=0; i<text.length-ngram+1; i++) {\n\t\tresult.push(text.slice(i, i+ngram));\n\t}\n\treturn result;\n}\n\n\n/**\n * Splitting text to words\n *\n * @ignore\n */\nexport function splitWords(text) {\n\treturn dedup(text.split(/\\s+/).filter(x => x.length > 0));\n}\n\n\n/**\n * Make n-gram set by text.\n *\n * @ignore\n */\nexport function tokenize(text, ngram=2) {\n\treturn dedup(splitText(text, ngram));\n}\n\n\n/**\n * Parse queries.\n *\n * @ignore\n */\nexport function splitQuery(query, ngram=2) {\n\tconst result = {};\n\tquery.split(/\\s+/).filter(q => q.length > 0).forEach(q => result[q] = tokenize(q, ngram));\n\treturn result;\n}\n\n\n/**\n * Deduplication from Array\n *\n * @ignore\n */\nexport function dedup(array) {\n\tconst result = new Array(array.length);\n\tconst index = new Set();\n\tlet idx = 0;\n\n\tfor (let i=0; i<array.length; i++) {\n\t\tif (!index.has(array[i])) {\n\t\t\tindex.add(array[i]);\n\t\t\tresult[idx] = array[i];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result.slice(0, idx);\n}\n\n\n/**\n * Faster Array.prototype.map\n *\n * @ignore\n */\nexport function fastMap(array, fun) {\n\tconst result = new Array(array.length);\n\tfor (let i=0; i<array.length; i++) {\n\t\tresult[i] = fun(array[i]);\n\t}\n\treturn result;\n}\n\n\n/**\n * Flatten nested array\n *\n * @ignore\n */\nexport function flatten(array) {\n\tlet length = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tlength += array[i].length;\n\t}\n\n\tconst result = new Array(length);\n\tlet idx = 0;\n\tfor (let i=0; i<array.length; i++) {\n\t\tfor (let j=0; j<array[i].length; j++) {\n\t\t\tresult[idx] = array[i][j];\n\t\t\tidx++;\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * NoSuchColumnError means specified no indexed column.\n */\nexport class NoSuchColumnError extends Error {\n\t/**\n\t * @param {object} column - name of errored column.\n\t */\n\tconstructor(column) {\n\t\tsuper(column + ': no such column or no indexed');\n\n\t\t/**\n\t\t * Column name that errored.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NoSuchColumnError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidKeyError means specified invalid key.\n */\nexport class InvalidKeyError extends Error {\n\t/**\n\t * @param {object} key - name of specified key.\n\t */\n\tconstructor(key) {\n\t\tsuper('invalid key');\n\n\t\t/**\n\t\t * Key name that specified.\n\t\t *\n\t\t * @type {object}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/** @ignore */\n\t\tthis.name = '';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidKeyError);\n\t\t}\n\t}\n}\n\n\n/**\n * InvalidSchemaError means specified invalid schema.\n */\nexport class InvalidSchemaError extends Error {\n\t/**\n\t * @param {string} reason - why throws this error.\n\t * @param {string|string[]|null} column - name of column that invalid.\n\t */\n\tconstructor(reason, column=null) {\n\t\tsuper(reason);\n\n\t\t/**\n\t\t * Name of column that invalid.\n\t\t *\n\t\t * @type {string|string[]|null}\n\t\t */\n\t\tthis.column = column;\n\n\t\t/** @ignore */\n\t\tthis.name = 'InvalidSchemaError';\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, InvalidSchemaError);\n\t\t}\n\t}\n}\n","import {splitQuery, splitWords} from './utils';\nimport {NoSuchColumnError} from './errors';\n\n\n/**\n * Promise like object for contents array.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSTransaction}.\n * But this class will processing all contents without using indexes.\n * Please consider using {@link IFTSTransaction} directly if it can.\n */\nexport default class IFTSArrayPromise {\n\t/**\n\t * @param {Set<string>} indexes - index names.\n\t * @param {Promise<object[]>} promise - Promise for wrapping.\n\t */\n\tconstructor(indexes, promise) {\n\t\t/** @type {Set<string>} */\n\t\tthis.indexes = indexes;\n\n\t\t/** @type {Promise<object[]>} */\n\t\tthis.promise = promise;\n\t}\n\n\t/**\n\t * Make resolved promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object[]} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic resolve(indexes, value=[]) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.resolve(value));\n\t}\n\n\t/**\n\t * Make rejected promise.\n\t *\n\t * @param {Set<string>} indexes - index names.\n\t * @param {object} value - value for promise.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tstatic reject(indexes, value=null) {\n\t\treturn new IFTSArrayPromise(indexes, Promise.reject(value));\n\t}\n\n\t/**\n\t * Set next function.\n\t *\n\t * @param {function(contents: object[]): *} fun - next function.\n\t *\n\t * @return {Promise}\n\t */\n\tthen(fun) {\n\t\treturn this.promise.then(fun);\n\t}\n\n\t/**\n\t * Set error handling function.\n\t *\n\t * @param {function(error: *): *} fun - error handling function.\n\t *\n\t * @return {Promise}\n\t */\n\tcatch(fun) {\n\t\treturn this.promise.catch(fun);\n\t}\n\n\t/**\n\t * Do something process for each elements and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.map(fun)));\n\t}\n\n\t/**\n\t * Filtering elements by function and make a new IFTSArrayPromise.\n\t *\n\t * @param {function(content: object, index: Number): boolean} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => xs.filter(fun)));\n\t}\n\n\t/**\n\t * Sort contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(this.indexes, this.then(xs => Array.prototype.concat.call([], xs).sort((x, y) => {\n\t\t\tif (x[column] < y[column]) {\n\t\t\t\treturn order === 'desc' ? 1 : -1;\n\t\t\t} else if (x[column] > y[column]) {\n\t\t\t\treturn order === 'desc' ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).slice(offset, limit === undefined ? undefined : offset + limit)));\n\t}\n\n\t/**\n\t * Checking index of column are exists and do {@link IFTSArrayPromise#filter}.\n\t *\n\t * @ignore\n\t */\n\t_checkAndFilter(column, fun) {\n\t\tif (!this.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\treturn this.filter(fun);\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] === value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] < value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] > value);\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] <= value);\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._checkAndFilter(column, x => x[column] >= value);\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._checkAndFilter(column, x => lower <= x[column] && x[column] <= upper);\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * This method can search even if didn't made ngram index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#search}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = [];\n\t\tfor (let q in splitQuery(query)) {\n\t\t\tqueries.push(q);\n\t\t}\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => toLowerIfNeed(data[col]).includes(q))));\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * This method can search even if didn't made word index.\n\t *\n\t * WARNING: This method always processes all contents without using indexes.\n\t * Please consider using {@link IFTSTransaction#searchWord}.\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let c of columns) {\n\t\t\tif (!this.indexes.has(c)) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.indexes, new NoSuchColumnError(c));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query);\n\n\t\tconst toLowerIfNeed = options.ignoreCase ? (x => x.toLowerCase()) : (x => x);\n\n\t\treturn this.filter(data => queries.every(q => columns.some(col => {\n\t\t\treturn splitWords(toLowerIfNeed(data[col])).includes(q);\n\t\t})));\n\t}\n}\n","import {tokenize, splitQuery, splitWords, fastMap, flatten, dedup} from './utils';\nimport {NoSuchColumnError, InvalidKeyError} from './errors';\nimport IFTSArrayPromise from './ArrayPromise';\n\n\n/**\n * Transaction.\n *\n * Almost methods are the same interface as {@link IndexedFTS} and {@link IFTSArrayPromise}.\n * Probably this class is faster than other classes in most cases.\n *\n * Please be careful, IFTSTransaction are sometimes makes a big cache.\n * Should not keep many transactions if not need.\n */\nexport default class IFTSTransaction {\n\t/**\n\t * @param {IndexedFTS} db - database.\n\t * @param {IDBTransaction} transaction - transaction of IndexedDB.\n\t */\n\tconstructor(db, transaction) {\n\t\t/** @type {IndexedDB} */\n\t\tthis.db = db;\n\n\t\t/** @type {IDBTransaction} */\n\t\tthis.transaction = transaction;\n\n\t\t/** @ignore */\n\t\tthis._KeyRange = this.db.scope.IDBKeyRange;\n\n\t\t/**\n\t\t * Promise for await closing transaction.\n\t\t *\n\t\t * @type {Promise<IndexedDB>}\n\t\t */\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.transaction.oncomplete = () => resolve(this.db);\n\t\t\tthis.transaction.onerror = err => reject(err);\n\t\t});\n\n\t\t/** @ignore */\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\tconst store = this.transaction.objectStore('data');\n\t\tconst ngram_indexes = fastMap([...this.db.schema.ngramIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column)}));\n\t\tconst word_indexes = fastMap([...this.db.schema.wordIndexes], column => ({name: column, store: this.transaction.objectStore(this.db.index_prefix + 'word_' + column)}));\n\n\t\tconst putPromises = new Array(contents.length);\n\t\tfor (let i=0; i<contents.length; i++) {\n\t\t\tputPromises[i] = new Promise((resolve, reject) => {\n\t\t\t\tconst req = store.put(contents[i]);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._updateNGramIndex(ev.target.result, contents[i], ngram_indexes)\n\t\t\t\t\t\t\t.then(() => this._updateWordIndex(ev.target.result, contents[i], word_indexes)))\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.all(putPromises).then(data => {\n\t\t\tfor (let i=0; i<data.length; i++) {\n\t\t\t\tconst key = data[i][0];\n\t\t\t\tconst value = data[i][1];\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t}\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Update ngram index.\n\t *\n\t * @ignore\n\t */\n\t_updateNGramIndex(key, data, ngram_indexes) {\n\t\treturn this._deleteIndex(key, ngram_indexes.map(x => this.db.index_prefix + 'ngram_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(ngram_indexes, col => {\n\t\t\t\tconst tokens = tokenize(data[col.name]);\n\t\t\t\tconst promises = new Array(tokens.length);\n\t\t\t\tfor (let i=0; i<tokens.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\ttoken: tokens[i],\n\t\t\t\t\t\t\tlower: tokens[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Update word index.\n\t *\n\t * @ignore\n\t */\n\t_updateWordIndex(key, data, word_indexes) {\n\t\treturn this._deleteIndex(key, word_indexes.map(x => this.db.index_prefix + 'word_' + x.name))\n\t\t\t.then(() => Promise.all(fastMap(word_indexes, col => {\n\t\t\t\tconst words = splitWords(data[col.name]);\n\t\t\t\tconst promises = new Array(words.length);\n\t\t\t\tfor (let i=0; i<words.length; i++) {\n\t\t\t\t\tpromises[i] = new Promise((resolve, reject) => {\n\t\t\t\t\t\tconst req = col.store.put({\n\t\t\t\t\t\t\tkey: key,\n\t\t\t\t\t\t\tword: words[i],\n\t\t\t\t\t\t\tlower: words[i].toLowerCase(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.onsuccess = () => resolve();\n\t\t\t\t\t\treq.onerror = reject;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.all(promises);\n\t\t\t})))\n\t\t\t.then(() => [key, data]);\n\t}\n\n\t/**\n\t * Delete content by FTS indexes of database.\n\t *\n\t * @ignore\n\t */\n\t_deleteIndex(key, tableNames) {\n\t\treturn Promise.all(tableNames.map(table => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.transaction.objectStore(table);\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tconst requests = [];\n\n\t\t\t\tconst req = store.index('key').openKeyCursor(this._KeyRange.only(key));\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = ev => {\n\t\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\trequests.push(new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tconst d = store.delete(cursor.primaryKey);\n\t\t\t\t\t\t\td.onsuccess = resolve;\n\t\t\t\t\t\t\td.onerror = reject\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(Promise.all(requests));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents. allowed multiple arguments.\n\t *\n\t * @return {Promise<IFTSTransaction>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\tfor (let i=0; i<keys.length; i++) {\n\t\t\tif (keys[i] === null || keys[i] === undefined) {\n\t\t\t\treturn Promise.reject(new InvalidKeyError(keys[i]));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(fastMap(keys, key => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst req = this.transaction.objectStore('data').delete(key);\n\t\t\t\treq.onerror = reject;\n\t\t\t\treq.onsuccess = resolve;\n\t\t\t})\n\t\t\t.then(() => this._deleteIndex(key, [\n\t\t\t\t...[...this.db.schema.ngramIndexes].map(x => this.db.index_prefix + 'ngram_' + x),\n\t\t\t\t...[...this.db.schema.wordIndexes].map(x => this.db.index_prefix + 'word_' + x),\n\t\t\t]))\n\t\t})).then(() => this);\n\t}\n\n\t/**\n\t * Make {@link IFTSArrayPromise} by cursor.\n\t *\n\t * @ignore\n\t */\n\t_readCursor(cursorRequest, filter=null, map=null, limit=undefined) {\n\t\tfilter = filter || ((x, i) => true);\n\t\tmap = map || ((x, i) => x);\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst result = [];\n\t\t\tlet index = 0;\n\n\t\t\tcursorRequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tif (filter(value, index)) {\n\t\t\t\t\t\tresult.push(map(value, index));\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (limit === undefined || index < limit) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tcursorRequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor());\n\t}\n\n\t/**\n\t * Get all contents with primary keys.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithKeys() {\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, new Promise((resolve, reject) => {\n\t\t\tconst request = this.transaction.objectStore('data').openCursor();\n\n\t\t\tconst result = [];\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\t\tvalue._key = cursor.key;\n\t\t\t\t\t}\n\t\t\t\t\tthis._cache[cursor.key] = value;\n\t\t\t\t\tresult.push({key: cursor.key, data: value});\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = err => reject(err);\n\t\t}));\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), null, fun);\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals} or {@link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._readCursor(this.transaction.objectStore('data').openCursor(null), fun, null);\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tlimit = limit === undefined ? undefined : offset + limit;\n\t\tconst offsetFilter = (x, i) => offset <= i;\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(null, order === 'desc' ? 'prev' : 'next'), offsetFilter, null, limit);\n\t\t}\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\tif (key === null || key === undefined) {\n\t\t\treturn Promise.reject(new InvalidKeyError(key));\n\t\t}\n\t\tif (key in this._cache) {\n\t\t\treturn Promise.resolve(this._cache[key]);\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = this.transaction.objectStore('data').get(key);\n\t\t\treq.onsuccess = ev => {\n\t\t\t\tconst value = ev.target.result;\n\t\t\t\tif (this.db.schema.primaryKey === null) {\n\t\t\t\t\tvalue._key = key;\n\t\t\t\t}\n\t\t\t\tthis._cache[key] = value;\n\t\t\t\tresolve(value);\n\t\t\t};\n\t\t\treq.onerror = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Get contents matched keyRange.\n\t *\n\t * @ignore\n\t */\n\t_getAllWithIndex(column, keyRange) {\n\t\tif (!this.db.schema.indexes.has(column)) {\n\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore('data');\n\n\t\tif (column === this.db.schema.primaryKey) {\n\t\t\treturn this._readCursor(store.openCursor(keyRange));\n\t\t} else {\n\t\t\treturn this._readCursor(store.index(column).openCursor(keyRange));\n\t\t}\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.only(value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, true));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.upperBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.lowerBound(value, false));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getAllWithIndex(column, this._KeyRange.bound(lower, upper, false, false));\n\t}\n\n\t/**\n\t * Get candidates of search result.\n\t *\n\t * @ignore\n\t */\n\t_takeCandidatesBySingleColumn(column, queries, options={}) {\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\t\tconst result = [];\n\n\t\tfor (let q in queries) {\n\t\t\tconst checkIncludes = (\n\t\t\t\toptions.ignoreCase\n\t\t\t\t\t? (x => x.data[column].toLowerCase().includes(q))\n\t\t\t\t\t: (x => x.data[column].includes(q))\n\t\t\t);\n\n\t\t\tif (queries[q].length === 0) {\n\t\t\t\tresult.push(this._getAllWithKeys().filter(checkIncludes).map(x => x.key).then(xs => ({query: q, keys: xs})));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst promises = new Array(queries[q].length);\n\t\t\tfor (let i=0; i<queries[q].length; i++) {\n\t\t\t\tpromises[i] = this._readCursor(index.openCursor(queries[q][i]), null, data => data.key);\n\t\t\t}\n\n\t\t\tconst candidate = Promise.all(promises)\n\t\t\t\t.then(founds => {\n\t\t\t\t\tif (founds.length === 0) {\n\t\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t\t}\n\n\t\t\t\t\tfounds = flatten(founds);\n\n\t\t\t\t\tconst deduped = new Array(founds.length);\n\t\t\t\t\tlet dedup_num = 0;\n\t\t\t\t\tconst hit_count = {};\n\t\t\t\t\tfor (let i=0; i<founds.length; i++) {\n\t\t\t\t\t\tif (!(founds[i] in hit_count)) {\n\t\t\t\t\t\t\thit_count[founds[i]] = 0;\n\n\t\t\t\t\t\t\tdeduped[dedup_num] = founds[i];\n\t\t\t\t\t\t\tdedup_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thit_count[founds[i]]++;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidates = new Array(dedup_num);\n\t\t\t\t\tlet candidate_num = 0;\n\t\t\t\t\tfor (let i=0; i<dedup_num; i++) {\n\t\t\t\t\t\tif (hit_count[deduped[i]] >= queries[q].length) {\n\t\t\t\t\t\t\tcandidates[candidate_num] = this.get(deduped[i]).then(data => ({key: deduped[i], data: data}));\n\t\t\t\t\t\t\tcandidate_num++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.all(candidates.slice(0, candidate_num));\n\t\t\t\t})\n\t\t\t\t.then(xs => ({query: q, keys: xs.filter(checkIncludes).map(x => x.key)}))\n\n\t\t\tresult.push(candidate);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Prune contents by result of {@link IFTSTransaction#_takeCandidatesBySingleColumn}.\n\t *\n\t * @ignore\n\t */\n\tasync _pruneCandidates(queries_num, candidates) {\n\t\tconst keys = {};\n\n\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\tfor (let j=0; j<candidates[i].keys.length; j++) {\n\t\t\t\tif (!(candidates[i].keys[j] in keys)) {\n\t\t\t\t\tkeys[candidates[i].keys[j]] = new Set();\n\t\t\t\t}\n\t\t\t\tkeys[candidates[i].keys[j]].add(candidates[i].query);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new Array(candidates.length);\n\t\tlet result_num = 0;\n\t\tfor (let key in keys) {\n\t\t\tif (keys[key].size == queries_num) {\n\t\t\t\tresult[result_num] = this.get(key);\n\t\t\t\tresult_num++;\n\t\t\t}\n\t\t}\n\n\t\treturn await Promise.all(result.slice(0, result_num));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.ngramIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitQuery(query);\n\t\tlet queries_length = 0;\n\n\t\tfor (let q in queries) {\n\t\t\tqueries[q] = fastMap(queries[q], x => this._KeyRange.only(x));\n\t\t\tqueries_length++;\n\t\t}\n\n\t\tconst candidatePromises = [];\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tArray.prototype.push.apply(candidatePromises, this._takeCandidatesBySingleColumn(columns[i], queries, options));\n\t\t}\n\n\t\treturn new IFTSArrayPromise(\n\t\t\tthis.db.schema.indexes,\n\t\t\tPromise.all(candidatePromises).then(xs => this._pruneCandidates(queries_length, xs)),\n\t\t);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\tif (typeof columns === 'string') {\n\t\t\tcolumns = [columns];\n\t\t}\n\n\t\tfor (let i=0; i<columns.length; i++) {\n\t\t\tif (!this.db.schema.wordIndexes.has(columns[i])) {\n\t\t\t\treturn IFTSArrayPromise.reject(this.db.schema.indexes, new NoSuchColumnError(columns[i]));\n\t\t\t}\n\t\t}\n\n\t\tquery = options.ignoreCase ? query.toLowerCase() : query;\n\t\tconst queries = splitWords(query).map(x => ({text: x, keyRange: this._KeyRange.only(x)}));\n\n\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(flatten(columns.map(col => {\n\t\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + col);\n\t\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\t\treturn queries.map(query => this._readCursor(index.openCursor(query.keyRange), null, data => [data.key, query.text]));\n\t\t}))).then(candidates => {\n\t\t\tcandidates = dedup(flatten(candidates));\n\n\t\t\tconst counts = {};\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (!(key in counts)) {\n\t\t\t\t\tcounts[key] = 0;\n\t\t\t\t}\n\t\t\t\tcounts[key]++;\n\t\t\t}\n\n\t\t\tconst hits = new Array(candidates.length);\n\t\t\tlet hits_count = 0;\n\t\t\tfor (let i=0; i<candidates.length; i++) {\n\t\t\t\tconst key = candidates[i][0];\n\t\t\t\tif (counts[key] >= queries.length) {\n\t\t\t\t\thits[hits_count] = key;\n\t\t\t\t\thits_count++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result = new Array(hits_count);\n\t\t\tfor (let i=0; i<hits_count; i++) {\n\t\t\t\tresult[i] = this.get(hits[i]);\n\t\t\t}\n\t\t\treturn new IFTSArrayPromise(this.db.schema.indexes, Promise.all(result));\n\t\t}));\n\t}\n\n\t/**\n\t * Make token set from index.\n\t *\n\t * @ignore\n\t */\n\t_readIndexSet(index) {\n\t\tconst result = new Map();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cursor = index.openKeyCursor();\n\n\t\t\tcursor.onsuccess = ev => {\n\t\t\t\tconst cursor = ev.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tresult.set(cursor.key, (result.get(cursor.key) || 0) + 1);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcursor.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\tif (!this.db.schema.ngramIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'ngram_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('token');\n\n\t\treturn this._readIndexSet(index);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\tif (!this.db.schema.wordIndexes.has(column)) {\n\t\t\treturn Promise.reject(new NoSuchColumnError(column));\n\t\t}\n\n\t\tconst store = this.transaction.objectStore(this.db.index_prefix + 'word_' + column);\n\t\tconst index = options.ignoreCase ? store.index('lower') : store.index('word');\n\n\t\treturn this._readIndexSet(index);\n\t}\n}\n","import {InvalidSchemaError} from './errors';\n\n\n/** @ignore */\nfunction normalize(schema) {\n\tconst allowedOptions = new Set(['primary', 'unique', 'ngram', 'fulltext', 'word']);\n\n\tconst result = {};\n\tfor (const col in schema) {\n\t\tresult[col] = {};\n\n\t\tif (typeof schema[col] === 'object') {\n\t\t\tfor (const opt in schema[col]) {\n\t\t\t\tif (!allowedOptions.has(opt)) {\n\t\t\t\t\tthrow new InvalidSchemaError(opt + ' is unknown option', col);\n\t\t\t\t}\n\t\t\t\tresult[col][opt] = schema[col][opt];\n\t\t\t}\n\t\t} else if (typeof schema[col] === 'string') {\n\t\t\tif (!allowedOptions.has(schema[col])) {\n\t\t\t\tthrow new InvalidSchemaError(schema[col] + ' is unknown option', col);\n\t\t\t}\n\t\t\tresult[col][schema[col]] = true;\n\t\t} else {\n\t\t\tthrow new InvalidSchemaError((typeof schema[col]) + ' is invalid option type', col);\n\t\t}\n\t}\n\treturn result;\n}\n\n\n/** @ignore */\nfunction schemaCheck(schema) {\n\tlet primaryKey = null;\n\n\tfor (const col in schema) {\n\t\tif (schema[col].primary !== undefined) {\n\t\t\tif (typeof schema[col].primary !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"primary\" option must be boolean', col);\n\t\t\t}\n\t\t\tif (schema[col].primary) {\n\t\t\t\tif (primaryKey !== null) {\n\t\t\t\t\tthrow new InvalidSchemaError('can not use multiple primary key', [col, primaryKey]);\n\t\t\t\t}\n\t\t\t\tprimaryKey = col;\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].unique !== undefined) {\n\t\t\tif (typeof schema[col].unique !== 'boolean') {\n\t\t\t\tthrow new InvalidSchemaError('\"unique\" option must be boolean', col);\n\t\t\t}\n\t\t}\n\n\t\tif (schema[col].primary && schema[col].unique) {\n\t\t\tthrow new InvalidSchemaError('can not enable both of \"primary\" option and \"unique\" option to same column', col);\n\t\t}\n\n\t\tif (schema[col].ngram !== undefined && schema[col].fulltext !== undefined) {\n\t\t\tthrow new InvalidSchemaError('can not set both of \"ngram\" option and \"fulltext\" option to same column', col);\n\t\t}\n\t\tconst fts = schema[col].ngram === undefined ? schema[col].fulltext : schema[col].ngram;\n\t\tconst ftsFrom = schema[col].ngram === undefined ? 'fulltext' : 'ngram';\n\t\tif (fts !== undefined && typeof fts !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError(`\"${ftsFrom}\" option must be boolean`, col);\n\t\t}\n\n\t\tif (schema[col].word !== undefined && typeof schema[col].word !== 'boolean') {\n\t\t\tthrow new InvalidSchemaError('\"word\" option must be boolean', col);\n\t\t}\n\t}\n}\n\n\nexport {normalize, schemaCheck};\n\n\n/**\n * The database schema of IndexedFTS.\n */\nexport default class IFTSSchema {\n\t/**\n\t * Create IFTSSchema.\n\t *\n\t * @param {object} schema - please see same name param of {@link IndexedFTS#constructor}.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(schema) {\n\t\t/** @ignore */\n\t\tthis._schema = normalize(schema);\n\n\t\t/** @ignore */\n\t\tthis._storeOption = {autoIncrement: true};\n\n\t\t/**\n\t\t * Primary key of this schema.\n\t\t *\n\t\t * This value will be null if not set primary key.\n\t\t *\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.primaryKey = null;\n\n\t\t/**\n\t\t * Column names that indexed with ngram for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.ngramIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that indexed with word for full-text search.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.wordIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that unique indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.uniqueIndexes = new Set();\n\n\t\t/**\n\t\t * Column names that normal indexed.\n\t\t *\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.normalIndexes = new Set();\n\n\t\tfor (let x in schema) {\n\t\t\tschemaCheck(this._schema);\n\n\t\t\tif (this._schema[x].primary) {\n\t\t\t\tthis.primaryKey = x;\n\t\t\t\tthis._storeOption = {keyPath: x};\n\t\t\t} else if (this._schema[x].unique) {\n\t\t\t\tthis.uniqueIndexes.add(x);\n\t\t\t} else {\n\t\t\t\tthis.normalIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].ngram || this._schema[x].fulltext) {\n\t\t\t\tthis.ngramIndexes.add(x);\n\t\t\t}\n\n\t\t\tif (this._schema[x].word) {\n\t\t\t\tthis.wordIndexes.add(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * All column names that indexed in some way.\n\t *\n\t * @type {Set<string>}\n\t */\n\tget indexes() {\n\t\tif (this.primaryKey) {\n\t\t\treturn new Set([this.primaryKey, ...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t} else {\n\t\t\treturn new Set([...this.uniqueIndexes, ...this.normalIndexes]);\n\t\t}\n\t}\n}\n","import IFTSTransaction from './Transaction';\nimport IFTSSchema from './Schema';\n\n\n/**\n * The database of IndexedFTS.\n *\n * Almost methods are the same interface as {@link IDBTransaction} and {@link IFTSArrayPromise}.\n */\nexport default class IndexedFTS {\n\t/**\n\t * Create or open IndexedFTS.\n\t *\n\t * Database has name and schema's version.\n\t * The name is a name of the database in the storage.\n\t *\n\t * The schema is an object that key is column name and value is a definition of indexes. Schema can't change in same version database.\n\t * If you want change schema of database, please change version number.\n\t * Please be careful, all contents will remove when changing the version number.\n\t *\n\t * Index types are 'primary', 'unique', 'fulltext', 'ngram', 'word', or normal index.\n\t *\n\t * 'primary' is a primary key of the database. 'primary' can't set to multiple columns.\n\t *\n\t * 'unique' is columns that have a unique value in the database.\n\t *\n\t * If set 'ngram' IndexedFTS will make 2-gram index table for full-text search.\n\t * 'fulltext' is alias to 'ngram'.\n\t *\n\t * 'word' is word based index.\n\t * The word index will split text with whitespaces and store those.\n\t * Word index is faster than the 'ngram' index but can't find a partial match in the word.\n\t *\n\t * The normal index that not set optioned that not unique, not primary, and not indexed for full-text search. You can numeric search like {@link IndexedFTS#lower} {@link IndexedFTS#between} even if not set option.\n\t *\n\t * If you want to set some index types, please use object like `{unique: true, fulltext: true}`.\n\t *\n\t * @param {string} name - name of new (or open) database.\n\t * @param {number} version - schema's version of database.\n\t * @param {object|IFTSSchema} schema - database schema.\n\t * @param {object} [options] - other options.\n\t * @param {string} [options.index_prefix='indexedfts_'] - prefix of indexes for full-text search.\n\t * @param {object} [options.scope=window] - endpoints for IndexedDB API.\n\t *\n\t * @throws {InvalidSchemaError}\n\t */\n\tconstructor(name, version, schema, options={}) {\n\t\t/** @type {string} */\n\t\tthis.index_prefix = options.index_prefix || 'indexedfts_';\n\n\t\t/** @type {object} */\n\t\tthis.scope = options.scope || window;\n\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\n\t\t/** @type {number} */\n\t\tthis.version = version;\n\n\t\t/** @type {IFTSSchema} */\n\t\tthis.schema = schema instanceof IFTSSchema ? schema : new IFTSSchema(schema);\n\n\n\t\t/** @type {IDBDatabase} */\n\t\tthis.db = null;\n\t}\n\n\t/**\n\t * Delete database.\n\t *\n\t * Must be close all IndexedFTS before delete database.\n\t *\n\t * @param {string} name - name of target database. this method will success even if no such database.\n\t * @param {object} [scope] - endpoints for IndexedDB API.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\tstatic delete(name, scope=null) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst req = (scope || window).indexedDB.deleteDatabase(name);\n\t\t\treq.onsuccess = ev => resolve();\n\t\t\treq.onerror = ev => reject(ev);\n\t\t});\n\t}\n\n\t/**\n\t * Open database.\n\t *\n\t * @return {Promise<undefined>}\n\t */\n\topen() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = this.scope.indexedDB.open(this.name, this.version);\n\n\t\t\trequest.onsuccess = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\t\t\t\tresolve(this);\n\t\t\t};\n\t\t\trequest.onerror = reject;\n\n\t\t\trequest.onupgradeneeded = ev => {\n\t\t\t\tthis.db = ev.target.result;\n\n\t\t\t\tconst store = this.db.createObjectStore('data', this.schema._storeOption);\n\n\t\t\t\tstore.onerror = reject;\n\n\t\t\t\tthis.schema.uniqueIndexes.forEach(x => store.createIndex(x, x, {unique: true}));\n\n\t\t\t\tthis.schema.normalIndexes.forEach(x => store.createIndex(x, x, {unique: false}));\n\n\t\t\t\tthis.schema.ngramIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'ngram_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('token', 'token', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\n\t\t\t\tthis.schema.wordIndexes.forEach(column => {\n\t\t\t\t\tconst fts_store = this.db.createObjectStore(this.index_prefix + 'word_' + column, {autoIncrement: true});\n\t\t\t\t\tfts_store.onerror = reject\n\t\t\t\t\tfts_store.createIndex('key', 'key', {unique: false});\n\t\t\t\t\tfts_store.createIndex('word', 'word', {unique: false});\n\t\t\t\t\tfts_store.createIndex('lower', 'lower', {unique: false});\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Close database.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Make new {@link IFTSTransaction}.\n\t *\n\t * @param {\"readonly\"|\"readwrite\"} mode - mode of transaction.\n\t * @param {string[]|null} target - open index targets. open for all if null.\n\t *\n\t * @return {IFTSTransaction}\n\t */\n\ttransaction(mode='readonly', target=null) {\n\t\tif (target === null) {\n\t\t\tconst ngrams = [...this.schema.ngramIndexes].map(x => this.index_prefix + 'ngram_' + x);\n\t\t\tconst words = [...this.schema.wordIndexes].map(x => this.index_prefix + 'word_' + x);\n\t\t\ttarget = ngrams.concat(words).concat(['data']);\n\t\t}\n\t\treturn new IFTSTransaction(this, this.db.transaction(target, mode));\n\t}\n\n\t/**\n\t * Put contents into database.\n\t *\n\t * @param {object} contents - contents for save. allowed multiple arguments.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain.\n\t */\n\tput(...contents) {\n\t\treturn this.transaction('readwrite').put(...contents).then(() => this);\n\t}\n\n\t/**\n\t * Delete contents from database.\n\t *\n\t * @param {object} keys - key of contents.\n\t *\n\t * @return {Promise<IndexedFTS>} returns self for chain. Will reject with {@link InvalidKeyError} if keys included null or undefined.\n\t */\n\tdelete(...keys) {\n\t\treturn this.transaction('readwrite').delete(...keys).then(() => this);\n\t}\n\n\t/**\n\t * Get content by primary key.\n\t *\n\t * @param {object} key - the key of content.\n\t *\n\t * @return {Promise<object|undefined>} content. promise will reject with {@link InvalidKeyError} if keys included null or undefined. result value will be undefined if not found.\n\t */\n\tget(key) {\n\t\treturn this.transaction('readonly', 'data').get(key);\n\t}\n\n\t/**\n\t * Get filtered contents.\n\t *\n\t * @ignore\n\t */\n\t_getFiltered(fun) {\n\t\treturn fun(this.transaction('readonly', 'data'));\n\t}\n\n\t/**\n\t * Get all contents.\n\t *\n\t * @return {IFTSArrayPromise} contents.\n\t */\n\tgetAll() {\n\t\treturn this._getFiltered(x => x.getAll());\n\t}\n\n\t/**\n\t * Do something process for each elements and returns {@link IFTSArrayPromise}.\n\t *\n\t * NOTE: This method doesn't fast. May better do filtering before doing map if need filtering.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for processing element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tmap(fun) {\n\t\treturn this._getFiltered(x => x.map(fun));\n\t}\n\n\t/**\n\t * Filtering elements by function and returns {@link IFTSArrayPromise}.\n\t *\n\t * WARNING: This method won't use the index. Other methods(eg. {@link IFTSTransaction#equals or @link IFTSTransaction#lower} may faster than this.\n\t *\n\t * @param {function(content: object, index: Number): object} fun - function for filtering element.\n\t *\n\t * @return {IFTSArrayPromise}\n\t */\n\tfilter(fun) {\n\t\treturn this._getFiltered(x => x.filter(fun));\n\t}\n\n\t/**\n\t * Sort and get all contents.\n\t *\n\t * @param {object} column - the column for sorting.\n\t * @param {'asc'|'desc'} [order='asc'] - sort order.\n\t * @param {Number} [offset=0] - starting offset of the result.\n\t * @param {Number} [limit] - maximum number of result length. will unlimited if omitted.\n\t *\n\t * @return {IFTSArrayPromise} sorted contents.\n\t */\n\tsort(column, order='asc', offset=0, limit=undefined) {\n\t\treturn this._getFiltered(x => x.sort(column, order, offset, limit));\n\t}\n\n\t/**\n\t * Get contents that have fully matched property.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tequals(column, value) {\n\t\treturn this._getFiltered(x => x.equals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlower(column, value) {\n\t\treturn this._getFiltered(x => x.lower(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreater(column, value) {\n\t\treturn this._getFiltered(x => x.greater(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property lower than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tlowerOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.lowerOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property greater than value or equals value.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} value - value for search.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tgreaterOrEquals(column, value) {\n\t\treturn this._getFiltered(x => x.greaterOrEquals(column, value));\n\t}\n\n\t/**\n\t * Get contents that have property is between argument values.\n\t *\n\t * @param {object} column - column name for search.\n\t * @param {object} lower - minimal value.\n\t * @param {object} upper - maximum value.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tbetween(column, lower, upper) {\n\t\treturn this._getFiltered(x => x.between(column, lower, upper));\n\t}\n\n\t/**\n\t * Get contents that have matched property by full-text search.\n\t *\n\t * All target columns have to made ngram index when created database.\n\t * If you didn't made ngram index, you can use {@link IFTSArrayPromise#search} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearch(columns, query, options={}) {\n\t\treturn this.transaction().search(columns, query, options);\n\t}\n\n\t/**\n\t * Find contents that have fully matched word in property.\n\t *\n\t * All target columns have to made word index when created database.\n\t * If you didn't made word index, you can use {@link IFTSArrayPromise#searchWord} (but this way is very slow).\n\t *\n\t *\n\t * @param {object|object[]} columns - column names for search.\n\t * @param {string} query - query for search.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case if true. default is false.\n\t *\n\t * @return {IFTSArrayPromise} matched contents. may reject with {@link NoSuchColumnError}.\n\t */\n\tsearchWord(columns, query, options={}) {\n\t\treturn this.transaction().searchWord(columns, query, options);\n\t}\n\n\t/**\n\t * Get N-Gram set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetNGrams(column, options={}) {\n\t\treturn this.transaction().getNGrams(column, options);\n\t}\n\n\t/**\n\t * Get word set from index.\n\t *\n\t * @param {string} column - name of column.\n\t * @param {object} [options] - optional arguments.\n\t * @param {boolean} [options.ignoreCase=false] - ignore case when make result.\n\t *\n\t * @return {Promise<Map<string, number>>}\n\t */\n\tgetWords(column, options={}) {\n\t\treturn this.transaction().getWords(column, options);\n\t}\n}\n"],"names":["splitWords","text","dedup","split","filter","x","length","tokenize","ngram","result","i","push","slice","splitText","splitQuery","query","q","forEach","array","Array","index","Set","idx","has","add","fastMap","fun","flatten","j","NoSuchColumnError","Error","column","name","captureStackTrace","this","InvalidKeyError","key","InvalidSchemaError","reason","IFTSArrayPromise","indexes","promise","value","Promise","resolve","reject","then","catch","xs","map","order","offset","limit","prototype","concat","call","sort","y","undefined","_checkAndFilter","lower","upper","columns","options","c","ignoreCase","toLowerCase","queries","toLowerIfNeed","data","every","some","col","includes","IFTSTransaction","db","transaction","_KeyRange","scope","IDBKeyRange","oncomplete","onerror","err","_cache","contents","store","objectStore","ngram_indexes","schema","ngramIndexes","index_prefix","word_indexes","wordIndexes","putPromises","req","put","onsuccess","ev","_updateNGramIndex","target","_updateWordIndex","all","primaryKey","_key","_deleteIndex","tokens","promises","words","tableNames","table","requests","openKeyCursor","only","cursor","d","delete","continue","keys","cursorRequest","_readCursor","openCursor","request","offsetFilter","get","keyRange","_getAllWithIndex","upperBound","lowerBound","bound","checkIncludes","_getAllWithKeys","candidate","founds","deduped","dedup_num","hit_count","candidates","candidate_num","queries_num","result_num","size","queries_length","candidatePromises","apply","_takeCandidatesBySingleColumn","_pruneCandidates","counts","hits","hits_count","Map","set","_readIndexSet","schemaCheck","primary","unique","fulltext","fts","ftsFrom","word","IFTSSchema","_schema","allowedOptions","opt","normalize","_storeOption","autoIncrement","uniqueIndexes","normalIndexes","keyPath","version","window","indexedDB","deleteDatabase","open","onupgradeneeded","createObjectStore","createIndex","fts_store","close","mode","ngrams","_getFiltered","getAll","equals","greater","lowerOrEquals","greaterOrEquals","between","search","searchWord","getNGrams","getWords"],"mappings":"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"}